#+title:     Sytter
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2023-04-11 Tue>
#+language:  en
#+file_tags:
#+tags:

Here be dragons!

A baby sitter for your computer system.

Provides a platform for watching your host and performing any corrective actions
you wish.

Runs natively.

* The Tour

** Configuration Examples

Configuration consists of a series of TOML files - each file represents a
"sytter". A sytter watches some particular aspect of the host and performs
operations based on changes to what the sytter observes. This can be used to
automate remediation or track the status of something.

Most operations here are shell operations, but Sytter will allow plugins that
make some operations incredibly easy.

*** Restart Runaway Processes

Sometimes you'll see some process that eats up loads of resources. One such
example is =com.apple.safari.History=. We need to move aside the history files
and restart the service (really just kill the service).

#+begin_src toml :results none
name = "History de-peg"
description = "Sometimes com.apple.safari.History eats a full CPU. Move SQLite
DB files and kill the process."

[watch]
# Some plugins will allow special watch condtions such as this, but generally
# will be shell invocations.
process = "com.apple.safari.History"

[condition]
process_resources = "cpu > 90%"
duration = "5m"

[execute]
shell = "mkdir -p ~/Library/Safari/old-history &&
mv ~/Library/Safari/History* ~/Library/Safari/old-history/ &&
kill -9 $(pgrep com.apple.Safari.History)
"

[failure]
shell = "mail -s 'History is pegged but remediation failed' $USER < $errFile"
#+end_src

*** Show VPN Connection Status in the Prompt

Using a contrived =interface-changed= executable, track the status of VPN
connectivity with an event listener.  Your prompt will need to poll
=~/.vpn-status= to determine what to display.

#+begin_src toml :results none
name = "Show VPN Connection Status"
description = "Check if we're connected to the VPN and record it for use in our prompt."

[watch]
trigger = "stdout"
# Some arbitrary executable that prints to stdout when the network interface
# changes.
exec = "interface-changed 'utun*'"
# Pass the stdout to this handler. Sets $sytter_state for use in our [execute]
# section based on what we see from the stdout.
state = "grep added && echo 'online' || echo 'offline'"

[execute]
shell = "echo \"$sytter_state\" > ~/.vpn-status"

[failure]
# This goes to a ~/.sytter-failures and ensures a unique account of this one
# sytter.
list-failure = true
#+end_src



*** Authenticate in a captive portal and =sendmail= errors

Let's say =$WORK= has some weird network segmentation policy in effect, and you
can only communicate with hosts if you're authenticated via a "captive portal"
system. Since this is =$WORK= you also have to be on the VPN for it to be
relevant. If there is a failure, use =sendmail= to send it. We only need one
email per consecutive error.

#+begin_src toml :results none
name = "Captive Portal Authentication"
description = "Periodically authenticate via Captive Portal when on the VPN."

[watch]
cron = "5 * * * *"

[condition]
shell = "[[ \"$(cat $VPN_FILE)\" == true ]]"

[execute]
shell = "~/bin/captivate.sh"

[failure]
repeat = false
shell = "printf '%s\n' 'Subject: Capitive Portal auth failed' \
        '' \
        'Captive Portal authentication is failing! See $LOG for details.' \
| sendmail $USER"
#+end_src

* Configuration
** Contrib

*** Shell

The Shell Sytter component allows shell invocations to do virtually any task.

Shell components expose context variables via environment variables prefixed
with =sytter_=.

* Design

** Startup

Upon startup, =sytter= reads from =--config-dir=, =$SYTTER_CONFIG_DIR=, or
=~/.config/sytter= for Sytters in that order. Execution of =cron= statements do
not happen immediately but instead wait for the schedule. Unscheduled operations
happen immediately, and have a soft intention of executing in lexicographical
order. No guarantees are made about this order.

See [[Order Dependent Sytters]] for examples of how to handle Sytters that need to
execute in a controlled order.

** Sytter Components

A Sytter declaration is made manifest via various Sytter Components that the
Sytter calls upon. These components fall under a few basic categories:

1. =watch=
2. =condition=
3. =execute=
4. =failure=

A Sytter Component can be stateful. All Sytters components may write to a shared
context.

* COMMENT Settings

#  LocalWords:  Sytter Sytters
