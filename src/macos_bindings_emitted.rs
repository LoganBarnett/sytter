#[cfg_attr(rustfmt, rustfmt_skip)]

/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const kIOReturnSuccess: u32 = 0;
pub const IOKIT: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_XROS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_14_0: u32 = 140000;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_17_0: u32 = 170000;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_17_0: u32 = 170000;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __XROS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_PROVISIONAL_ID_PROT_OPTOUT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const PPNUM_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const OSTYPES_K64_REV: u32 = 2;
pub const IOPhysSize: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_HW: u32 = 4096;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_CM_HLS: u32 = 106;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_COPY_DELAY_FORK: u32 = 6;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_ARM_UNDEFINED: u32 = 1;
pub const EXC_ARM_FP_UNDEFINED: u32 = 0;
pub const EXC_ARM_FP_IO: u32 = 1;
pub const EXC_ARM_FP_DZ: u32 = 2;
pub const EXC_ARM_FP_OF: u32 = 3;
pub const EXC_ARM_FP_UF: u32 = 4;
pub const EXC_ARM_FP_IX: u32 = 5;
pub const EXC_ARM_FP_ID: u32 = 6;
pub const EXC_ARM_DA_ALIGN: u32 = 257;
pub const EXC_ARM_DA_DEBUG: u32 = 258;
pub const EXC_ARM_SP_ALIGN: u32 = 259;
pub const EXC_ARM_SWP: u32 = 260;
pub const EXC_ARM_PAC_FAIL: u32 = 261;
pub const EXC_ARM_BREAKPOINT: u32 = 1;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_CPU_STAT: u32 = 268435459;
pub const PROCESSOR_CPU_STAT64: u32 = 268435460;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_BASIC_INFO_64_2: u32 = 18;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const MACH_VM_MIN_ADDRESS_RAW: u32 = 0;
pub const MACH_VM_MAX_ADDRESS_RAW: u64 = 140737454800896;
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW: u64 = 68719476736;
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW: u64 = 481036337152;
pub const SWI_SYSCALL: u32 = 128;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const _MACH_INIT_: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const API_TO_BE_DEPRECATED_XROS: u32 = 100000;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const kIOKitBuildVersionKey: &[u8; 18] = b"IOKitBuildVersion\0";
pub const kIOKitDiagnosticsKey: &[u8; 17] = b"IOKitDiagnostics\0";
pub const kIORegistryPlanesKey: &[u8; 17] = b"IORegistryPlanes\0";
pub const kIOCatalogueKey: &[u8; 12] = b"IOCatalogue\0";
pub const kIOServicePlane: &[u8; 10] = b"IOService\0";
pub const kIOPowerPlane: &[u8; 8] = b"IOPower\0";
pub const kIODeviceTreePlane: &[u8; 13] = b"IODeviceTree\0";
pub const kIOAudioPlane: &[u8; 8] = b"IOAudio\0";
pub const kIOFireWirePlane: &[u8; 11] = b"IOFireWire\0";
pub const kIOUSBPlane: &[u8; 6] = b"IOUSB\0";
pub const kIORegistryEntryIDKey: &[u8; 18] = b"IORegistryEntryID\0";
pub const kIORegistryEntryPropertyKeysKey: &[u8; 28] =
    b"IORegistryEntryPropertyKeys\0";
pub const kIORegistryEntryAllowableSetPropertiesKey: &[u8; 38] =
    b"IORegistryEntryAllowableSetProperties\0";
pub const kIORegistryEntryDefaultLockingSetPropertiesKey: &[u8; 43] =
    b"IORegistryEntryDefaultLockingSetProperties\0";
pub const kIOServiceClass: &[u8; 10] = b"IOService\0";
pub const kIOResourcesClass: &[u8; 12] = b"IOResources\0";
pub const kIOClassKey: &[u8; 8] = b"IOClass\0";
pub const kIOProbeScoreKey: &[u8; 13] = b"IOProbeScore\0";
pub const kIOKitDebugKey: &[u8; 11] = b"IOKitDebug\0";
pub const kIOUserClassKey: &[u8; 12] = b"IOUserClass\0";
pub const kIOUserClassesKey: &[u8; 14] = b"IOUserClasses\0";
pub const kIOSupportedPropertiesKey: &[u8; 22] = b"IOSupportedProperties\0";
pub const kIOUserServicePropertiesKey: &[u8; 24] = b"IOUserServiceProperties\0";
pub const kIOProviderClassKey: &[u8; 16] = b"IOProviderClass\0";
pub const kIONameMatchKey: &[u8; 12] = b"IONameMatch\0";
pub const kIOPropertyMatchKey: &[u8; 16] = b"IOPropertyMatch\0";
pub const kIOPropertyExistsMatchKey: &[u8; 22] = b"IOPropertyExistsMatch\0";
pub const kIOPathMatchKey: &[u8; 12] = b"IOPathMatch\0";
pub const kIOLocationMatchKey: &[u8; 16] = b"IOLocationMatch\0";
pub const kIOParentMatchKey: &[u8; 14] = b"IOParentMatch\0";
pub const kIOResourceMatchKey: &[u8; 16] = b"IOResourceMatch\0";
pub const kIOResourceMatchedKey: &[u8; 18] = b"IOResourceMatched\0";
pub const kIOMatchedServiceCountKey: &[u8; 27] =
    b"IOMatchedServiceCountMatch\0";
pub const kIONameMatchedKey: &[u8; 14] = b"IONameMatched\0";
pub const kIOMatchCategoryKey: &[u8; 16] = b"IOMatchCategory\0";
pub const kIODefaultMatchCategoryKey: &[u8; 23] = b"IODefaultMatchCategory\0";
pub const kIOMatchedPersonalityKey: &[u8; 21] = b"IOMatchedPersonality\0";
pub const kIORematchPersonalityKey: &[u8; 21] = b"IORematchPersonality\0";
pub const kIORematchCountKey: &[u8; 15] = b"IORematchCount\0";
pub const kIODEXTMatchCountKey: &[u8; 17] = b"IODEXTMatchCount\0";
pub const kIOUserClientEntitlementsKey: &[u8; 25] =
    b"IOUserClientEntitlements\0";
pub const kIOServiceDEXTEntitlementsKey: &[u8; 26] =
    b"IOServiceDEXTEntitlements\0";
pub const kIODriverKitEntitlementKey: &[u8; 30] =
    b"com.apple.developer.driverkit\0";
pub const kIODriverKitUserClientEntitlementsKey: &[u8; 48] =
    b"com.apple.developer.driverkit.userclient-access\0";
pub const kIODriverKitRequiredEntitlementsKey: &[u8; 42] =
    b"com.apple.private.driverkit.driver-access\0";
pub const kIODriverKitTestDriverEntitlementKey: &[u8; 40] =
    b"com.apple.private.driverkit.test-driver\0";
pub const kIODriverKitUserClientEntitlementAllowAnyKey: &[u8; 58] =
    b"com.apple.developer.driverkit.allow-any-userclient-access\0";
pub const kIODriverKitUserClientEntitlementAdministratorKey: &[u8; 44] =
    b"com.apple.developer.driverkit.administrator\0";
pub const kIODriverKitUserClientEntitlementCommunicatesWithDriversKey: &[u8;
     56] = b"com.apple.developer.driverkit.communicates-with-drivers\0";
pub const kIODriverKitUserClientEntitlementAllowThirdPartyUserClientsKey:
    &[u8; 60] =
    b"com.apple.developer.driverkit.allow-third-party-userclients\0";
pub const kIODriverKitUSBTransportEntitlementKey: &[u8; 44] =
    b"com.apple.developer.driverkit.transport.usb\0";
pub const kIODriverKitHIDTransportEntitlementKey: &[u8; 44] =
    b"com.apple.developer.driverkit.transport.hid\0";
pub const kIODriverKitHIDFamilyDeviceEntitlementKey: &[u8; 48] =
    b"com.apple.developer.driverkit.family.hid.device\0";
pub const kIODriverKitHIDFamilyEventServiceEntitlementKey: &[u8; 54] =
    b"com.apple.developer.driverkit.family.hid.eventservice\0";
pub const kIODriverKitTransportBuiltinEntitlementKey: &[u8; 38] =
    b"com.apple.developer.driverkit.builtin\0";
pub const kIONVRAMReadAccessKey: &[u8; 42] =
    b"com.apple.private.iokit.nvram-read-access\0";
pub const kIONVRAMWriteAccessKey: &[u8; 43] =
    b"com.apple.private.iokit.nvram-write-access\0";
pub const kIOResourcesSetPropertyKey: &[u8; 48] =
    b"com.apple.private.iokit.ioresources.setproperty\0";
pub const kIONVRAMSystemAllowKey: &[u8; 43] =
    b"com.apple.private.iokit.system-nvram-allow\0";
pub const kIOMatchDeferKey: &[u8; 13] = b"IOMatchDefer\0";
pub const kIOAllCPUInitializedKey: &[u8; 20] = b"IOAllCPUInitialized\0";
pub const kIOUserClientClassKey: &[u8; 18] = b"IOUserClientClass\0";
pub const kIOMapperIDKey: &[u8; 11] = b"IOMapperID\0";
pub const kIOUserClientCrossEndianKey: &[u8; 24] = b"IOUserClientCrossEndian\0";
pub const kIOUserClientCrossEndianCompatibleKey: &[u8; 34] =
    b"IOUserClientCrossEndianCompatible\0";
pub const kIOUserClientSharedInstanceKey: &[u8; 27] =
    b"IOUserClientSharedInstance\0";
pub const kIOUserClientDefaultLockingKey: &[u8; 27] =
    b"IOUserClientDefaultLocking\0";
pub const kIOUserClientDefaultLockingSetPropertiesKey: &[u8; 40] =
    b"IOUserClientDefaultLockingSetProperties\0";
pub const kIOUserClientDefaultLockingSingleThreadExternalMethodKey: &[u8; 53] =
    b"IOUserClientDefaultLockingSingleThreadExternalMethod\0";
pub const kIOUserClientCreatorKey: &[u8; 20] = b"IOUserClientCreator\0";
pub const kIOUserServerCDHashKey: &[u8; 19] = b"IOUserServerCDHash\0";
pub const kIOUserUserClientKey: &[u8; 17] = b"IOUserUserClient\0";
pub const kIOUserServerOneProcessKey: &[u8; 23] = b"IOUserServerOneProcess\0";
pub const kIOUserServerPreserveUserspaceRebootKey: &[u8; 36] =
    b"IOUserServerPreserveUserspaceReboot\0";
pub const kIOPublishNotification: &[u8; 17] = b"IOServicePublish\0";
pub const kIOFirstPublishNotification: &[u8; 22] = b"IOServiceFirstPublish\0";
pub const kIOMatchedNotification: &[u8; 17] = b"IOServiceMatched\0";
pub const kIOFirstMatchNotification: &[u8; 20] = b"IOServiceFirstMatch\0";
pub const kIOTerminatedNotification: &[u8; 19] = b"IOServiceTerminate\0";
pub const kIOWillTerminateNotification: &[u8; 23] = b"IOServiceWillTerminate\0";
pub const kIOGeneralInterest: &[u8; 18] = b"IOGeneralInterest\0";
pub const kIOBusyInterest: &[u8; 15] = b"IOBusyInterest\0";
pub const kIOAppPowerStateInterest: &[u8; 24] = b"IOAppPowerStateInterest\0";
pub const kIOPriorityPowerStateInterest: &[u8; 29] =
    b"IOPriorityPowerStateInterest\0";
pub const kIOPlatformDeviceMessageKey: &[u8; 24] = b"IOPlatformDeviceMessage\0";
pub const kIOCFPlugInTypesKey: &[u8; 16] = b"IOCFPlugInTypes\0";
pub const kIOCompatibilityMatchKey: &[u8; 21] = b"IOCompatibilityMatch\0";
pub const kIOCompatibilityPropertiesKey: &[u8; 26] =
    b"IOCompatibilityProperties\0";
pub const kIOPathKey: &[u8; 7] = b"IOPath\0";
pub const kIOCommandPoolSizeKey: &[u8; 18] = b"IOCommandPoolSize\0";
pub const kIOMaximumPriorityCountKey: &[u8; 23] = b"IOMaximumPriorityCount\0";
pub const kIOMaximumBlockCountReadKey: &[u8; 24] = b"IOMaximumBlockCountRead\0";
pub const kIOMaximumBlockCountWriteKey: &[u8; 25] =
    b"IOMaximumBlockCountWrite\0";
pub const kIOMaximumByteCountReadKey: &[u8; 23] = b"IOMaximumByteCountRead\0";
pub const kIOMaximumByteCountWriteKey: &[u8; 24] = b"IOMaximumByteCountWrite\0";
pub const kIOMaximumSegmentCountReadKey: &[u8; 26] =
    b"IOMaximumSegmentCountRead\0";
pub const kIOMaximumSegmentCountWriteKey: &[u8; 27] =
    b"IOMaximumSegmentCountWrite\0";
pub const kIOMaximumSegmentByteCountReadKey: &[u8; 30] =
    b"IOMaximumSegmentByteCountRead\0";
pub const kIOMaximumSegmentByteCountWriteKey: &[u8; 31] =
    b"IOMaximumSegmentByteCountWrite\0";
pub const kIOMinimumSegmentAlignmentByteCountKey: &[u8; 35] =
    b"IOMinimumSegmentAlignmentByteCount\0";
pub const kIOMaximumSegmentAddressableBitCountKey: &[u8; 36] =
    b"IOMaximumSegmentAddressableBitCount\0";
pub const kIOMinimumSaturationByteCountKey: &[u8; 29] =
    b"IOMinimumSaturationByteCount\0";
pub const kIOMaximumSwapWriteKey: &[u8; 19] = b"IOMaximumSwapWrite\0";
pub const kIOIconKey: &[u8; 7] = b"IOIcon\0";
pub const kIOBundleResourceFileKey: &[u8; 21] = b"IOBundleResourceFile\0";
pub const kIOBusBadgeKey: &[u8; 11] = b"IOBusBadge\0";
pub const kIODeviceIconKey: &[u8; 13] = b"IODeviceIcon\0";
pub const kIOPlatformSerialNumberKey: &[u8; 23] = b"IOPlatformSerialNumber\0";
pub const kIOPlatformUUIDKey: &[u8; 15] = b"IOPlatformUUID\0";
pub const kIONVRAMBootArgsKey: &[u8; 10] = b"boot-args\0";
pub const kIONVRAMDeletePropertyKey: &[u8; 24] = b"IONVRAM-DELETE-PROPERTY\0";
pub const kIONVRAMSyncNowPropertyKey: &[u8; 25] = b"IONVRAM-SYNCNOW-PROPERTY\0";
pub const kIONVRAMActivateCSRConfigPropertyKey: &[u8; 24] =
    b"IONVRAM-ARMCSR-PROPERTY\0";
pub const kIODTNVRAMPanicInfoKey: &[u8; 16] = b"aapl,panic-info\0";
pub const kIOBootDeviceKey: &[u8; 13] = b"IOBootDevice\0";
pub const kIOBootDevicePathKey: &[u8; 17] = b"IOBootDevicePath\0";
pub const kIOBootDeviceSizeKey: &[u8; 17] = b"IOBootDeviceSize\0";
pub const kOSBuildVersionKey: &[u8; 17] = b"OS Build Version\0";
pub const kIOStateNotificationItemCreateKey: &[u8; 41] =
    b"com.apple.iokit.statenotification.create\0";
pub const kIOStateNotificationItemSetKey: &[u8; 38] =
    b"com.apple.iokit.statenotification.set\0";
pub const kIOStateNotificationItemCopyKey: &[u8; 39] =
    b"com.apple.iokit.statenotification.copy\0";
pub const kIOStateNotificationNameKey: &[u8; 39] =
    b"com.apple.iokit.statenotification.name\0";
pub const kIOStateNotificationEntitlementSetKey: &[u8; 50] =
    b"com.apple.iokit.statenotification.entitlement-set\0";
pub const kIOStateNotificationEntitlementGetKey: &[u8; 50] =
    b"com.apple.iokit.statenotification.entitlement-get\0";
pub const kIOSystemStateClamshellKey: &[u8; 29] =
    b"com.apple.iokit.pm.clamshell\0";
pub const kIOSystemStateSleepDescriptionKey: &[u8; 36] =
    b"com.apple.iokit.pm.sleepdescription\0";
pub const kIOSystemStateSleepDescriptionReasonKey: &[u8; 31] =
    b"com.apple.iokit.pm.sleepreason\0";
pub const kIOSystemStateSleepDescriptionHibernateStateKey: &[u8; 34] =
    b"com.apple.iokit.pm.hibernatestate\0";
pub const kIOSystemStateWakeDescriptionKey: &[u8; 35] =
    b"com.apple.iokit.pm.wakedescription\0";
pub const kIOSystemStateWakeDescriptionWakeReasonKey: &[u8; 30] =
    b"com.apple.iokit.pm.wakereason\0";
pub const kIOSystemStateHaltDescriptionKey: &[u8; 35] =
    b"com.apple.iokit.pm.haltdescription\0";
pub const kIOSystemStateHaltDescriptionHaltStateKey: &[u8; 29] =
    b"com.apple.iokit.pm.haltstate\0";
pub const kIOSystemStatePowerSourceDescriptionKey: &[u8; 42] =
    b"com.apple.iokit.pm.powersourcedescription\0";
pub const kIOSystemStatePowerSourceDescriptionACAttachedKey: &[u8; 30] =
    b"com.apple.iokit.pm.acattached\0";
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_OFD_SETLK: u32 = 90;
pub const F_OFD_SETLKW: u32 = 91;
pub const F_OFD_GETLK: u32 = 92;
pub const F_OFD_SETLKWTIMEOUT: u32 = 93;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const F_ATTRIBUTION_TAG: u32 = 111;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const ATTRIBUTION_NAME_MAX: u32 = 255;
pub const F_CREATE_TAG: u32 = 1;
pub const F_DELETE_TAG: u32 = 2;
pub const F_QUERY_TAG: u32 = 4;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 1;
pub const OS_OBJECT_USE_OBJC: u32 = 1;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const OBJC_BOOL_IS_BOOL: u32 = 1;
pub const NSIntegerMax: u64 = 9223372036854775807;
pub const NSIntegerMin: i64 = -9223372036854775808;
pub const NSUIntegerMax: i32 = -1;
pub const NSINTEGER_DEFINED: u32 = 1;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const MSEC_PER_SEC: u32 = 1000;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const kPMSetAggressiveness: u32 = 0;
pub const kPMGetAggressiveness: u32 = 1;
pub const kPMSleepSystem: u32 = 2;
pub const kPMAllowPowerChange: u32 = 3;
pub const kPMCancelPowerChange: u32 = 4;
pub const kPMShutdownSystem: u32 = 5;
pub const kPMRestartSystem: u32 = 6;
pub const kPMSleepSystemOptions: u32 = 7;
pub const kPMSetMaintenanceWakeCalendar: u32 = 8;
pub const kPMSetUserAssertionLevels: u32 = 9;
pub const kPMActivityTickle: u32 = 10;
pub const kPMGetSystemSleepType: u32 = 11;
pub const kPMSetClamshellSleepState: u32 = 12;
pub const kPMSleepWakeWatchdogEnable: u32 = 13;
pub const kPMSleepWakeDebugTrig: u32 = 14;
pub const kPMSetDisplayPowerOn: u32 = 15;
pub const kPMSetDisplayState: u32 = 16;
pub const kNumPMMethods: u32 = 17;
pub const kIOPMAutoWake: &[u8; 5] = b"wake\0";
pub const kIOPMAutoPowerOn: &[u8; 8] = b"poweron\0";
pub const kIOPMAutoWakeOrPowerOn: &[u8; 12] = b"wakepoweron\0";
pub const kIOPMAutoSleep: &[u8; 6] = b"sleep\0";
pub const kIOPMAutoShutdown: &[u8; 9] = b"shutdown\0";
pub const kIOPMAutoRestart: &[u8; 8] = b"restart\0";
pub const kIOPMPowerEventTimeKey: &[u8; 5] = b"time\0";
pub const kIOPMPowerEventAppNameKey: &[u8; 12] = b"scheduledby\0";
pub const kIOPMPowerEventAppPIDKey: &[u8; 7] = b"appPID\0";
pub const kIOPMPowerEventTypeKey: &[u8; 10] = b"eventtype\0";
pub const kIOSystemLoadAdvisoryNotifyName: &[u8; 52] =
    b"com.apple.system.powermanagement.SystemLoadAdvisory\0";
pub const kIOPMCPUPowerNotificationKey: &[u8; 27] =
    b"com.apple.system.power.CPU\0";
pub const kIOPMThermalWarningNotificationKey: &[u8; 39] =
    b"com.apple.system.power.thermal_warning\0";
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t =
    ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
pub type IOReturn = kern_return_t;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
    >,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type boolean_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_status> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_pset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_seqno) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_mscount) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_mscount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_qlimit) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_qlimit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_msgcount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_msgcount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_sorights) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_sorights)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_srights) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_srights)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_pdrequest) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pdrequest)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_nsrequest) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_nsrequest)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mps_flags) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_flags)
        )
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_limits> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mpl_qlimit) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_limits),
            "::",
            stringify!(mpl_qlimit)
        )
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_info_ext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mpie_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mpie_boost_cnt) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(reserved)
        )
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[test]
fn bindgen_test_layout_mach_port_guard_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_guard_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_guard_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_guard_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mpgi_guard) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_guard_info),
            "::",
            stringify!(mpgi_guard)
        )
    );
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_qos> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_qos),
            "::",
            stringify!(len)
        )
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[test]
fn bindgen_test_layout_mach_service_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_service_port_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_service_port_info>(),
        256usize,
        concat!("Size of: ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_service_port_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mspi_string_name) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_string_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mspi_domain_type) as usize
                - ptr as usize
        },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_domain_type)
        )
    );
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).work_interval_port) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).service_port_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).service_port_name) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_name)
        )
    );
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(mpl)
        )
    );
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY:
    mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS:
    mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT:
    mach_port_guard_exception_codes = 4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED:
    mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE:
    mach_port_guard_exception_codes = 32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY:
    mach_port_guard_exception_codes = 64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED:
    mach_port_guard_exception_codes = 128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME:
    mach_port_guard_exception_codes = 512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS:
    mach_port_guard_exception_codes = 4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE:
    mach_port_guard_exception_codes = 16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS : mach_port_guard_exception_codes = 8388608 ;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE : mach_port_guard_exception_codes = 16777216 ;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_type_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_type_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_type_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_type_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad2)
        )
    );
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_port_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        mach_msg_guarded_port_descriptor32_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        mach_msg_guarded_port_descriptor64_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 =
                unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[test]
fn bindgen_test_layout_mach_msg_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).out_of_line) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(out_of_line)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ool_ports) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(ool_ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).guarded_port) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(guarded_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_body_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_body_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_body_t>(),
        4usize,
        concat!("Size of: ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_body_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_descriptor_count) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_body_t),
            "::",
            stringify!(msgh_descriptor_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[test]
fn bindgen_test_layout_mach_msg_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_header_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_header_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_bits) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_bits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_remote_port) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_remote_port)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_local_port) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_local_port)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_voucher_port) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_voucher_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[test]
fn bindgen_test_layout_mach_msg_base_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_base_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_base_t>(),
        28usize,
        concat!("Size of: ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_base_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(body)
        )
    );
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_trailer_t>(),
        8usize,
        concat!("Size of: ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout_mach_msg_seqno_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_seqno_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_seqno_trailer_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_seqno_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_security_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<security_token_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<security_token_t>(),
        8usize,
        concat!("Size of: ", stringify!(security_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<security_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(security_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(security_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_security_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_security_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_security_trailer_t>(),
        20usize,
        concat!("Size of: ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_security_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_audit_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<audit_token_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_token_t>(),
        32usize,
        concat!("Size of: ", stringify!(audit_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_audit_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_audit_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_audit_trailer_t>(),
        52usize,
        concat!("Size of: ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_audit_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout_mach_msg_context_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_context_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_context_trailer_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_context_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_msg_labels_t() {
    const UNINIT: ::std::mem::MaybeUninit<msg_labels_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg_labels_t>(),
        4usize,
        concat!("Size of: ", stringify!(msg_labels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_labels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_labels_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sender) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_labels_t),
            "::",
            stringify!(sender)
        )
    );
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[test]
fn bindgen_test_layout_mach_msg_mac_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_mac_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_mac_trailer_t>(),
        68usize,
        concat!("Size of: ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_mac_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_ad) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_ad)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).msgh_labels) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_labels)
        )
    );
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_send_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_send_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_send_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_send_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_send_t),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_rcv_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_rcv_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_rcv_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_rcv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(rcv)
        )
    );
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[test]
fn bindgen_test_layout_mach_vm_range() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_range> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_range>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_range))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_range>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_vm_range))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range),
            "::",
            stringify!(min_address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range),
            "::",
            stringify!(max_address)
        )
    );
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_INVALID:
    mach_vm_range_flavor_t = 0;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_V1:
    mach_vm_range_flavor_t = 1;
pub type mach_vm_range_flavor_t = u32;
pub const mach_vm_range_flags_t_MACH_VM_RANGE_NONE: mach_vm_range_flags_t = 0;
pub type mach_vm_range_flags_t = u64;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DEFAULT: mach_vm_range_tag_t = 0;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DATA: mach_vm_range_tag_t = 1;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_FIXED: mach_vm_range_tag_t = 2;
pub type mach_vm_range_tag_t = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range_recipe_v1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub range: mach_vm_range,
}
#[test]
fn bindgen_test_layout_mach_vm_range_recipe_v1_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_range_recipe_v1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_range_recipe_v1_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_vm_range_recipe_v1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_range_recipe_v1_t>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_vm_range_recipe_v1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range_recipe_v1_t),
            "::",
            stringify!(range)
        )
    );
}
impl mach_vm_range_recipe_v1_t {
    #[inline]
    pub fn flags(&self) -> mach_vm_range_flags_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 48u8) as u64)
        }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub fn range_tag(&self) -> mach_vm_range_tag_t {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u16)
        }
    }
    #[inline]
    pub fn set_range_tag(&mut self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn vm_tag(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u8)
        }
    }
    #[inline]
    pub fn set_vm_tag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_vm_range_flags_t,
        range_tag: mach_vm_range_tag_t,
        vm_tag: u8,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 48u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let range_tag: u16 = unsafe { ::std::mem::transmute(range_tag) };
            range_tag as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let vm_tag: u8 = unsafe { ::std::mem::transmute(vm_tag) };
            vm_tag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_vm_range_recipe_t = mach_vm_range_recipe_v1_t;
pub type mach_vm_range_recipes_raw_t = *mut u8;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[test]
fn bindgen_test_layout__OSUnalignedU16() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU16> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU16>(),
        2usize,
        concat!("Size of: ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU16>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU16),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[test]
fn bindgen_test_layout__OSUnalignedU32() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU32>(),
        4usize,
        concat!("Size of: ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU32>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU32),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[test]
fn bindgen_test_layout__OSUnalignedU64() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU64>(),
        8usize,
        concat!("Size of: ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU64>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU64),
            "::",
            stringify!(__val)
        )
    );
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[test]
fn bindgen_test_layout_wide() {
    const UNINIT: ::std::mem::MaybeUninit<wide> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wide>(),
        8usize,
        concat!("Size of: ", stringify!(wide))
    );
    assert_eq!(
        ::std::mem::align_of::<wide>(),
        2usize,
        concat!("Alignment of ", stringify!(wide))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(lo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(hi))
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
#[test]
fn bindgen_test_layout_UnsignedWide() {
    const UNINIT: ::std::mem::MaybeUninit<UnsignedWide> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UnsignedWide>(),
        8usize,
        concat!("Size of: ", stringify!(UnsignedWide))
    );
    assert_eq!(
        ::std::mem::align_of::<UnsignedWide>(),
        2usize,
        concat!("Alignment of ", stringify!(UnsignedWide))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnsignedWide),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UnsignedWide),
            "::",
            stringify!(hi)
        )
    );
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float80() {
    const UNINIT: ::std::mem::MaybeUninit<Float80> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float80>(),
        10usize,
        concat!("Size of: ", stringify!(Float80))
    );
    assert_eq!(
        ::std::mem::align_of::<Float80>(),
        2usize,
        concat!("Alignment of ", stringify!(Float80))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float80),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).man) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Float80),
            "::",
            stringify!(man)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float96() {
    const UNINIT: ::std::mem::MaybeUninit<Float96> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float96>(),
        12usize,
        concat!("Size of: ", stringify!(Float96))
    );
    assert_eq!(
        ::std::mem::align_of::<Float96>(),
        2usize,
        concat!("Alignment of ", stringify!(Float96))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float96),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).man) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Float96),
            "::",
            stringify!(man)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
#[test]
fn bindgen_test_layout_Float32Point() {
    const UNINIT: ::std::mem::MaybeUninit<Float32Point> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Float32Point>(),
        8usize,
        concat!("Size of: ", stringify!(Float32Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Float32Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Float32Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float32Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Float32Point),
            "::",
            stringify!(y)
        )
    );
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_4 = 1061109567;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
#[test]
fn bindgen_test_layout_ProcessSerialNumber() {
    const UNINIT: ::std::mem::MaybeUninit<ProcessSerialNumber> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ProcessSerialNumber>(),
        8usize,
        concat!("Size of: ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<ProcessSerialNumber>(),
        2usize,
        concat!("Alignment of ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).highLongOfPSN) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(highLongOfPSN)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lowLongOfPSN) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(lowLongOfPSN)
        )
    );
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Point() {
    const UNINIT: ::std::mem::MaybeUninit<Point> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Point>(),
        4usize,
        concat!("Size of: ", stringify!(Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(h))
    );
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<Rect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Rect>(),
        8usize,
        concat!("Size of: ", stringify!(Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<Rect>(),
        2usize,
        concat!("Alignment of ", stringify!(Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(right)
        )
    );
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[test]
fn bindgen_test_layout_FixedPoint() {
    const UNINIT: ::std::mem::MaybeUninit<FixedPoint> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FixedPoint>(),
        8usize,
        concat!("Size of: ", stringify!(FixedPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedPoint>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
#[test]
fn bindgen_test_layout_FixedRect() {
    const UNINIT: ::std::mem::MaybeUninit<FixedRect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FixedRect>(),
        16usize,
        concat!("Size of: ", stringify!(FixedRect))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedRect>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(bottom)
        )
    );
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_5 = 0;
pub const bold: _bindgen_ty_5 = 1;
pub const italic: _bindgen_ty_5 = 2;
pub const underline: _bindgen_ty_5 = 4;
pub const outline: _bindgen_ty_5 = 8;
pub const shadow: _bindgen_ty_5 = 16;
pub const condense: _bindgen_ty_5 = 32;
pub const extend: _bindgen_ty_5 = 64;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[test]
fn bindgen_test_layout_TimeRecord() {
    const UNINIT: ::std::mem::MaybeUninit<TimeRecord> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TimeRecord>(),
        20usize,
        concat!("Size of: ", stringify!(TimeRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<TimeRecord>(),
        2usize,
        concat!("Alignment of ", stringify!(TimeRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
#[test]
fn bindgen_test_layout_NumVersion() {
    const UNINIT: ::std::mem::MaybeUninit<NumVersion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NumVersion>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(NumVersion))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nonRelRev) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(nonRelRev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minorAndBugRev) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(minorAndBugRev)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).majorRev) as usize - ptr as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(majorRev)
        )
    );
}
pub const developStage: _bindgen_ty_6 = 32;
pub const alphaStage: _bindgen_ty_6 = 64;
pub const betaStage: _bindgen_ty_6 = 96;
pub const finalStage: _bindgen_ty_6 = 128;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
#[test]
fn bindgen_test_layout_NumVersionVariant() {
    const UNINIT: ::std::mem::MaybeUninit<NumVersionVariant> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NumVersionVariant>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersionVariant>(),
        2usize,
        concat!("Alignment of ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersionVariant),
            "::",
            stringify!(parts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whole) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersionVariant),
            "::",
            stringify!(whole)
        )
    );
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
#[test]
fn bindgen_test_layout_VersRec() {
    const UNINIT: ::std::mem::MaybeUninit<VersRec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VersRec>(),
        518usize,
        concat!("Size of: ", stringify!(VersRec))
    );
    assert_eq!(
        ::std::mem::align_of::<VersRec>(),
        2usize,
        concat!("Alignment of ", stringify!(VersRec))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).numericVersion) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(numericVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).countryCode) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(countryCode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shortVersion) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(shortVersion)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(reserved)
        )
    );
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
pub type UInt = ::std::os::raw::c_uint;
pub type SInt = ::std::os::raw::c_int;
pub type IOOptionBits = UInt32;
pub type IOFixed = SInt32;
pub type IOVersion = UInt32;
pub type IOItemCount = UInt32;
pub type IOCacheMode = UInt32;
pub type IOByteCount32 = UInt32;
pub type IOByteCount64 = UInt64;
pub type IOPhysicalAddress32 = UInt32;
pub type IOPhysicalAddress64 = UInt64;
pub type IOPhysicalLength32 = UInt32;
pub type IOPhysicalLength64 = UInt64;
pub type IOVirtualAddress = mach_vm_address_t;
pub type IOByteCount = IOByteCount64;
pub type IOLogicalAddress = IOVirtualAddress;
pub type IOPhysicalAddress = IOPhysicalAddress64;
pub type IOPhysicalLength = IOPhysicalLength64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPhysicalRange {
    pub address: IOPhysicalAddress,
    pub length: IOByteCount,
}
#[test]
fn bindgen_test_layout_IOPhysicalRange() {
    const UNINIT: ::std::mem::MaybeUninit<IOPhysicalRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOPhysicalRange>(),
        16usize,
        concat!("Size of: ", stringify!(IOPhysicalRange))
    );
    assert_eq!(
        ::std::mem::align_of::<IOPhysicalRange>(),
        8usize,
        concat!("Alignment of ", stringify!(IOPhysicalRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOPhysicalRange),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOPhysicalRange),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOVirtualRange {
    pub address: IOVirtualAddress,
    pub length: IOByteCount,
}
#[test]
fn bindgen_test_layout_IOVirtualRange() {
    const UNINIT: ::std::mem::MaybeUninit<IOVirtualRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOVirtualRange>(),
        16usize,
        concat!("Size of: ", stringify!(IOVirtualRange))
    );
    assert_eq!(
        ::std::mem::align_of::<IOVirtualRange>(),
        8usize,
        concat!("Alignment of ", stringify!(IOVirtualRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOVirtualRange),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IOVirtualRange),
            "::",
            stringify!(length)
        )
    );
}
pub type IOAddressRange = IOVirtualRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONamedValue {
    pub value: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_IONamedValue() {
    const UNINIT: ::std::mem::MaybeUninit<IONamedValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IONamedValue>(),
        16usize,
        concat!("Size of: ", stringify!(IONamedValue))
    );
    assert_eq!(
        ::std::mem::align_of::<IONamedValue>(),
        8usize,
        concat!("Alignment of ", stringify!(IONamedValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IONamedValue),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IONamedValue),
            "::",
            stringify!(name)
        )
    );
}
pub type IOAlignment = ::std::os::raw::c_uint;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct io_object_t(pub mach_port_t);
impl ::std::ops::Deref for io_object_t {
    type Target = mach_port_t;
    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl ::std::ops::DerefMut for io_object_t {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
pub type uuid_t = __darwin_uuid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics>(),
        60usize,
        concat!("Size of: ", stringify!(vm_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_statistics))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).speculative_count) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(speculative_count)
        )
    );
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[test]
fn bindgen_test_layout_vm_statistics64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics64>(),
        152usize,
        concat!("Size of: ", stringify!(vm_statistics64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics64>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_statistics64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).speculative_count) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(speculative_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(decompressions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressions) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapins) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).swapouts) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapouts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressor_page_count) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressor_page_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).throttled_count) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(throttled_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_page_count) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(external_page_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_page_count) as usize
                - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(internal_page_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_uncompressed_pages_in_compressor)
                as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(total_uncompressed_pages_in_compressor)
        )
    );
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[test]
fn bindgen_test_layout_vm_extmod_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_extmod_statistics> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_extmod_statistics>(),
        48usize,
        concat!("Size of: ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_extmod_statistics>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_for_pid_count) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_for_pid_caller_count) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_caller_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_creation_count) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_creation_caller_count) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_caller_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_set_state_count) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_set_state_caller_count) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_caller_count)
        )
    );
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_vm_purgeable_stat() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_stat> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_stat>(),
        16usize,
        concat!("Size of: ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(size)
        )
    );
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[test]
fn bindgen_test_layout_vm_purgeable_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_info>(),
        272usize,
        concat!("Size of: ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fifo_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(fifo_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).obsolete_data) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(obsolete_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lifo_data) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(lifo_data)
        )
    );
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE : virtual_memory_guard_exception_codes = 2 ;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE : virtual_memory_guard_exception_codes = 4 ;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE : virtual_memory_guard_exception_codes = 8 ;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[test]
fn bindgen_test_layout_time_value() {
    const UNINIT: ::std::mem::MaybeUninit<time_value> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<time_value>(),
        8usize,
        concat!("Size of: ", stringify!(time_value))
    );
    assert_eq!(
        ::std::mem::align_of::<time_value>(),
        4usize,
        concat!("Alignment of ", stringify!(time_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).microseconds) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(microseconds)
        )
    );
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[test]
fn bindgen_test_layout_host_can_has_debugger_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_can_has_debugger_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Size of: ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).can_has_debugger) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_can_has_debugger_info),
            "::",
            stringify!(can_has_debugger)
        )
    );
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[test]
fn bindgen_test_layout_host_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(host_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_cpus) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_cpus)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).avail_cpus) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(avail_cpus)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).memory_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(memory_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_threadtype) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_threadtype)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).physical_cpu) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).physical_cpu_max) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu_max)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).logical_cpu) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).logical_cpu_max) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_mem)
        )
    );
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[test]
fn bindgen_test_layout_host_sched_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_sched_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_sched_info>(),
        8usize,
        concat!("Size of: ", stringify!(host_sched_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_sched_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_sched_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_timeout) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_timeout)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_quantum) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_quantum)
        )
    );
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[test]
fn bindgen_test_layout_kernel_resource_sizes() {
    const UNINIT: ::std::mem::MaybeUninit<kernel_resource_sizes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kernel_resource_sizes>(),
        20usize,
        concat!("Size of: ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kernel_resource_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).memory_region) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_region)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).memory_object) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_object)
        )
    );
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[test]
fn bindgen_test_layout_host_priority_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_priority_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_priority_info>(),
        32usize,
        concat!("Size of: ", stringify!(host_priority_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_priority_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_priority_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).kernel_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(kernel_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_priority) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(system_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).server_priority) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(server_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_priority) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(user_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depress_priority) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(depress_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).idle_priority) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(idle_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minimum_priority) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(minimum_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maximum_priority) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(maximum_priority)
        )
    );
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[test]
fn bindgen_test_layout_host_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_load_info>(),
        24usize,
        concat!("Size of: ", stringify!(host_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avenrun) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(avenrun)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[test]
fn bindgen_test_layout_host_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_cpu_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[test]
fn bindgen_test_layout_host_preferred_user_arch() {
    const UNINIT: ::std::mem::MaybeUninit<host_preferred_user_arch> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_preferred_user_arch>(),
        8usize,
        concat!("Size of: ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<host_preferred_user_arch>(),
        4usize,
        concat!("Alignment of ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_subtype)
        )
    );
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_perf_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_perf_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_perf_info>(),
        8usize,
        concat!("Size of: ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_perf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).may_cache) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(may_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_attr_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_attr_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_attr_info>(),
        16usize,
        concat!("Size of: ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_attr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).may_cache_object) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(may_cache_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(temporary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_behave_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_behave_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_behave_info>(),
        20usize,
        concat!("Size of: ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_behave_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(temporary)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).invalidate) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).silent_overwrite) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(silent_overwrite)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advisory_pageout) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(advisory_pageout)
        )
    );
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_exception_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fsr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__fsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__far)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_exception_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__far)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__esr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__exception)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state>(),
        68usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__cpsr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_thread_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state64>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fp) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__cpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_vfp_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_vfp_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_vfp_state>(),
        260usize,
        concat!("Size of: ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_vfp_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpscr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__fpscr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_neon_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state64>(),
        528usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_neon_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___arm_pagein_state() {
    const UNINIT: ::std::mem::MaybeUninit<__arm_pagein_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__arm_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[test]
fn bindgen_test_layout___arm_legacy_debug_state() {
    const UNINIT: ::std::mem::MaybeUninit<__arm_legacy_debug_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__arm_legacy_debug_state>(),
        256usize,
        concat!("Size of: ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_legacy_debug_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_debug_state32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state32>(),
        264usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state32>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_debug_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state64>(),
        520usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_arm_cpmu_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_cpmu_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_arm_state_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<arm_state_hdr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<arm_state_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(arm_state_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<arm_state_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(arm_state_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_state_hdr),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_state_hdr),
            "::",
            stringify!(count)
        )
    );
}
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
#[test]
fn bindgen_test_layout_arm_unified_thread_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        arm_unified_thread_state__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<arm_unified_thread_state__bindgen_ty_1>(),
        272usize,
        concat!(
            "Size of: ",
            stringify!(arm_unified_thread_state__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<arm_unified_thread_state__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(arm_unified_thread_state__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_unified_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts_32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_unified_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts_64)
        )
    );
}
#[test]
fn bindgen_test_layout_arm_unified_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<arm_unified_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<arm_unified_thread_state>(),
        280usize,
        concat!("Size of: ", stringify!(arm_unified_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<arm_unified_thread_state>(),
        8usize,
        concat!("Alignment of ", stringify!(arm_unified_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_unified_thread_state),
            "::",
            stringify!(ash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_unified_thread_state),
            "::",
            stringify!(uts)
        )
    );
}
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_space() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_genno_mask) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_genno_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_table_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_table_next) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_tree_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_tree_small) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_small)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iis_tree_hash) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_hash)
        )
    );
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[test]
fn bindgen_test_layout_ipc_info_space_basic() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space_basic> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space_basic>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space_basic>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iisb_genno_mask) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_genno_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iisb_table_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iisb_table_next) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iisb_table_inuse) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_inuse)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iisb_reserved) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_reserved)
        )
    );
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_name> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_name>(),
        28usize,
        concat!("Size of: ", stringify!(ipc_info_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_name))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_collision) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_collision)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_type) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_urefs) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_urefs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_object) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_next) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iin_hash) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_hash)
        )
    );
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_ipc_info_tree_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_tree_name> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_tree_name>(),
        36usize,
        concat!("Size of: ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_tree_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iitn_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iitn_lchild) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_lchild)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iitn_rchild) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_rchild)
        )
    );
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_port() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_port> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_port>(),
        8usize,
        concat!("Size of: ", stringify!(ipc_info_port))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_port>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_port))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iip_port_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_port),
            "::",
            stringify!(iip_port_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iip_receiver_object) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_port),
            "::",
            stringify!(iip_receiver_object)
        )
    );
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t =
    *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mach_voucher_attr_recipe_data() {
    const UNINIT: ::std::mem::MaybeUninit<mach_voucher_attr_recipe_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_voucher_attr_recipe_data>(),
        16usize,
        concat!("Size of: ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_voucher_attr_recipe_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).previous_voucher) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(previous_voucher)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).content_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content)
        )
    );
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t =
    *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat {
    pub irq_ex_cnt: u32,
    pub ipi_cnt: u32,
    pub timer_cnt: u32,
    pub undef_ex_cnt: u32,
    pub unaligned_cnt: u32,
    pub vfp_cnt: u32,
    pub vfp_shortv_cnt: u32,
    pub data_ex_cnt: u32,
    pub instr_ex_cnt: u32,
}
#[test]
fn bindgen_test_layout_processor_cpu_stat() {
    const UNINIT: ::std::mem::MaybeUninit<processor_cpu_stat> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_stat>(),
        36usize,
        concat!("Size of: ", stringify!(processor_cpu_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_stat>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_stat))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).irq_ex_cnt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(irq_ex_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_cnt) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(ipi_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).timer_cnt) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(timer_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).undef_ex_cnt) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(undef_ex_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unaligned_cnt) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(unaligned_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfp_cnt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(vfp_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vfp_shortv_cnt) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(vfp_shortv_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).data_ex_cnt) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(data_ex_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).instr_ex_cnt) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat),
            "::",
            stringify!(instr_ex_cnt)
        )
    );
}
pub type processor_cpu_stat_data_t = processor_cpu_stat;
pub type processor_cpu_stat_t = *mut processor_cpu_stat;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat64 {
    pub irq_ex_cnt: u64,
    pub ipi_cnt: u64,
    pub timer_cnt: u64,
    pub undef_ex_cnt: u64,
    pub unaligned_cnt: u64,
    pub vfp_cnt: u64,
    pub vfp_shortv_cnt: u64,
    pub data_ex_cnt: u64,
    pub instr_ex_cnt: u64,
    pub pmi_cnt: u64,
}
#[test]
fn bindgen_test_layout_processor_cpu_stat64() {
    const UNINIT: ::std::mem::MaybeUninit<processor_cpu_stat64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_stat64>(),
        80usize,
        concat!("Size of: ", stringify!(processor_cpu_stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_stat64>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_stat64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).irq_ex_cnt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(irq_ex_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(ipi_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).timer_cnt) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(timer_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).undef_ex_cnt) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(undef_ex_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unaligned_cnt) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(unaligned_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfp_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(vfp_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vfp_shortv_cnt) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(vfp_shortv_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).data_ex_cnt) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(data_ex_cnt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).instr_ex_cnt) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(instr_ex_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmi_cnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_stat64),
            "::",
            stringify!(pmi_cnt)
        )
    );
}
pub type processor_cpu_stat64_data_t = processor_cpu_stat64;
pub type processor_cpu_stat64_t = *mut processor_cpu_stat64;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
#[test]
fn bindgen_test_layout_processor_basic_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(processor_basic_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(processor_basic_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_master) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_main) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_main)
        )
    );
}
#[test]
fn bindgen_test_layout_processor_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info>(),
        20usize,
        concat!("Size of: ", stringify!(processor_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).slot_num) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(slot_num)
        )
    );
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_processor_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_cpu_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_processor_set_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_basic_info>(),
        8usize,
        concat!("Size of: ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).processor_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(processor_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_policy) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(default_policy)
        )
    );
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[test]
fn bindgen_test_layout_processor_set_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(task_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).load_average) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(load_average)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_limit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cur_priority) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(cur_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depress_priority) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_base>(),
        8usize,
        concat!("Size of: ", stringify!(policy_rr_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_base))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(quantum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_limit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_rr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(quantum)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depress_priority) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_limit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_info>(),
        16usize,
        concat!("Size of: ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depress_priority) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[test]
fn bindgen_test_layout_policy_bases() {
    const UNINIT: ::std::mem::MaybeUninit<policy_bases> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_bases>(),
        16usize,
        concat!("Size of: ", stringify!(policy_bases))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_bases>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_bases))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[test]
fn bindgen_test_layout_policy_limits() {
    const UNINIT: ::std::mem::MaybeUninit<policy_limits> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_limits>(),
        12usize,
        concat!("Size of: ", stringify!(policy_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[test]
fn bindgen_test_layout_policy_infos() {
    const UNINIT: ::std::mem::MaybeUninit<policy_infos> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_infos>(),
        56usize,
        concat!("Size of: ", stringify!(policy_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_infos>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_infos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(fifo)
        )
    );
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_32() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_32>(),
        32usize,
        concat!("Size of: ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_32>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_64>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[test]
fn bindgen_test_layout_task_events_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_events_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_events_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_events_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_events_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_events_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messages_sent) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_sent)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messages_received) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_received)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).syscalls_mach) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_mach)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).syscalls_unix) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_unix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(csw)
        )
    );
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[test]
fn bindgen_test_layout_task_thread_times_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_thread_times_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_thread_times_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_thread_times_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(system_time)
        )
    );
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[test]
fn bindgen_test_layout_task_absolutetime_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_absolutetime_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_absolutetime_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_absolutetime_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).threads_user) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_user)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).threads_system) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_system)
        )
    );
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[test]
fn bindgen_test_layout_task_kernelmemory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_kernelmemory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_kernelmemory_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_kernelmemory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_palloc) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_palloc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_pfree) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_pfree)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_salloc) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_salloc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_sfree) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_sfree)
        )
    );
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[test]
fn bindgen_test_layout_task_affinity_tag_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_affinity_tag_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_affinity_tag_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_affinity_tag_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).set_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(set_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(task_count)
        )
    );
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[test]
fn bindgen_test_layout_task_dyld_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_dyld_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_dyld_info>(),
        20usize,
        concat!("Size of: ", stringify!(task_dyld_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_dyld_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_dyld_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).all_image_info_addr) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).all_image_info_size) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).all_image_info_format) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_format)
        )
    );
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64_2 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_64_2() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_64_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_64_2>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info_64_2))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_64_2>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_64_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64_2),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_64_2_data_t = task_basic_info_64_2;
pub type task_basic_info_64_2_t = *mut task_basic_info_64_2;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[test]
fn bindgen_test_layout_task_extmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_extmod_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_extmod_info>(),
        64usize,
        concat!("Size of: ", stringify!(task_extmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_extmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_extmod_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_uuid) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(task_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extmod_statistics) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(extmod_statistics)
        )
    );
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[test]
fn bindgen_test_layout_mach_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_task_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_task_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size_max) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size_max)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[test]
fn bindgen_test_layout_task_power_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info>(),
        48usize,
        concat!("Size of: ", stringify!(task_power_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_interrupt_wakeups) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_interrupt_wakeups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_platform_idle_wakeups) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_platform_idle_wakeups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_1) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_2) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_2)
        )
    );
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
#[test]
fn bindgen_test_layout_task_vm_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_vm_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_vm_info>(),
        356usize,
        concat!("Size of: ", stringify!(task_vm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_vm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_vm_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).region_count) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(region_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resident_size_peak) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).device_peak) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_peak) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_peak) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reusable) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reusable_peak) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).purgeable_volatile_pmap) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_pmap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).purgeable_volatile_resident) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).purgeable_volatile_virtual) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_virtual)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressed) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressed_peak) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressed_lifetime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_lifetime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).phys_footprint) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(min_address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(max_address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_phys_footprint_peak) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_phys_footprint_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_nonvolatile) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_novolatile_compressed)
                as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_novolatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile_compressed)
                as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_nonvolatile) as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).ledger_tag_network_nonvolatile_compressed
            ) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile_compressed)
                as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint_compressed)
                as usize
                - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint) as usize
                - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint_compressed)
                as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_footprint) as usize
                - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).ledger_tag_graphics_footprint_compressed
            ) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_nofootprint)
                as usize
                - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).ledger_tag_graphics_nofootprint_compressed
            ) as usize
                - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint) as usize
                - ptr as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint_compressed)
                as usize
                - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_nofootprint) as usize
                - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).ledger_tag_neural_nofootprint_compressed
            ) as usize
                - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).limit_bytes_remaining) as usize
                - ptr as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(limit_bytes_remaining)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(decompressions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_swapins) as usize - ptr as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_swapins)
        )
    );
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[test]
fn bindgen_test_layout_task_trace_memory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_trace_memory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_trace_memory_info>(),
        24usize,
        concat!("Size of: ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_trace_memory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_memory_address) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(user_memory_address)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mailbox_array_size) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(mailbox_array_size)
        )
    );
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_task_wait_state_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_wait_state_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_wait_state_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_wait_state_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_wait_state_time) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_state_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_wait_sfi_state_time) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_sfi_state_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(_reserved)
        )
    );
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[test]
fn bindgen_test_layout_gpu_energy_data() {
    const UNINIT: ::std::mem::MaybeUninit<gpu_energy_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gpu_energy_data>(),
        32usize,
        concat!("Size of: ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gpu_energy_data>(),
        4usize,
        concat!("Alignment of ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_gpu_utilisation) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_utilisation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved0) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved0)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved1) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved2) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved2)
        )
    );
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_energy: u64,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[test]
fn bindgen_test_layout_task_power_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info_v2>(),
        104usize,
        concat!("Size of: ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info_v2>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_energy) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(cpu_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gpu_energy) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(gpu_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_energy) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_ptime) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_ptime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_pset_switches) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_pset_switches)
        )
    );
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_task_flags_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_flags_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_flags_info>(),
        4usize,
        concat!("Size of: ", stringify!(task_flags_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_flags_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_flags_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_flags_info),
            "::",
            stringify!(flags)
        )
    );
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor =
    1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[test]
fn bindgen_test_layout_task_inspect_basic_counts() {
    const UNINIT: ::std::mem::MaybeUninit<task_inspect_basic_counts> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_inspect_basic_counts>(),
        16usize,
        concat!("Size of: ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        ::std::mem::align_of::<task_inspect_basic_counts>(),
        8usize,
        concat!("Alignment of ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).instructions) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(cycles)
        )
    );
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[test]
fn bindgen_test_layout_task_category_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_category_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_category_policy>(),
        4usize,
        concat!("Size of: ", stringify!(task_category_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_category_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_category_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).role) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_category_policy),
            "::",
            stringify!(role)
        )
    );
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED:
    task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos =
    16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos =
    16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos =
    16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos =
    16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos =
    16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos =
    16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_task_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_qos_policy>(),
        8usize,
        concat!("Size of: ", stringify!(task_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_qos_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_latency_qos_tier) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_latency_qos_tier)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).task_throughput_qos_tier) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_throughput_qos_tier)
        )
    );
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[test]
fn bindgen_test_layout_thread_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(thread_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpu_usage) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(cpu_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_state) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(run_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sleep_time) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(sleep_time)
        )
    );
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[test]
fn bindgen_test_layout_thread_identifier_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_identifier_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_identifier_info>(),
        24usize,
        concat!("Size of: ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_identifier_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_handle) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_handle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dispatch_qaddr) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(dispatch_qaddr)
        )
    );
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_thread_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_info>(),
        112usize,
        concat!("Size of: ", stringify!(thread_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_extended_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_user_time) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_system_time) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_cpu_usage) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_cpu_usage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_policy) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_policy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_run_state) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_run_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_flags) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_sleep_time) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_sleep_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_curpri) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_curpri)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_priority) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_priority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_maxpriority) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_maxpriority)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pth_name) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_name)
        )
    );
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_io_stat_entry() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_entry>(),
        16usize,
        concat!("Size of: ", stringify!(io_stat_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[test]
fn bindgen_test_layout_io_stat_info() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_info>(),
        128usize,
        concat!("Size of: ", stringify!(io_stat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_info>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disk_reads) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(disk_reads)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_priority) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(io_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paging) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(paging)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_io) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(total_io)
        )
    );
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[test]
fn bindgen_test_layout_thread_standard_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_standard_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_standard_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_standard_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_standard_policy),
            "::",
            stringify!(no_data)
        )
    );
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_extended_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).timeshare) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_policy),
            "::",
            stringify!(timeshare)
        )
    );
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_time_constraint_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_time_constraint_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_time_constraint_policy>(),
        16usize,
        concat!("Size of: ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_time_constraint_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).computation) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(computation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).preemptible) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(preemptible)
        )
    );
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[test]
fn bindgen_test_layout_thread_precedence_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_precedence_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_precedence_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_precedence_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).importance) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_precedence_policy),
            "::",
            stringify!(importance)
        )
    );
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[test]
fn bindgen_test_layout_thread_affinity_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_affinity_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_affinity_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_affinity_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).affinity_tag) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_affinity_policy),
            "::",
            stringify!(affinity_tag)
        )
    );
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[test]
fn bindgen_test_layout_thread_background_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_background_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_background_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_background_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_background_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_background_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_background_policy),
            "::",
            stringify!(priority)
        )
    );
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[test]
fn bindgen_test_layout_thread_latency_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_latency_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_latency_qos_tier) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_latency_qos_policy),
            "::",
            stringify!(thread_latency_qos_tier)
        )
    );
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_thread_throughput_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_throughput_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_throughput_qos_tier) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_throughput_qos_policy),
            "::",
            stringify!(thread_throughput_qos_tier)
        )
    );
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[test]
fn bindgen_test_layout_mach_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<mach_timespec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_timespec>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info_64>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_wired_count) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info>(),
        32usize,
        concat!("Size of: ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_wired_count) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_vm_region_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_extended_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_extended_info>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_extended_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_reusable)
        )
    );
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_vm_region_top_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_top_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_top_info>(),
        20usize,
        concat!("Size of: ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_top_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).private_pages_resident) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(private_pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shared_pages_resident) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(shared_pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(share_mode)
        )
    );
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info>(),
        60usize,
        concat!("Size of: ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_wired_count) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info_64>(),
        76usize,
        concat!("Size of: ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize
        },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_wired_count) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_reusable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_id_full) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id_full)
        )
    );
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_short_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_short_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_short_info_64>(),
        48usize,
        concat!("Size of: ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_short_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_wired_count) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout_mach_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_read_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<vm_read_entry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vm_page_info_basic() {
    const UNINIT: ::std::mem::MaybeUninit<vm_page_info_basic> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_page_info_basic>(),
        32usize,
        concat!("Size of: ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_page_info_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disposition) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(disposition)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(__pad)
        )
    );
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        ki: *mut kmod_info,
        data: *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        ki: *mut kmod_info,
        data: *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[test]
fn bindgen_test_layout_kmod_reference() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_reference> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_reference>(),
        16usize,
        concat!("Size of: ", stringify!(kmod_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_reference>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_reference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(info)
        )
    );
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[test]
fn bindgen_test_layout_kmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_list) as usize - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(stop)
        )
    );
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[test]
fn bindgen_test_layout_kmod_info_32_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_32_v1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_32_v1>(),
        168usize,
        concat!("Size of: ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_32_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[test]
fn bindgen_test_layout_kmod_info_64_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_64_v1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_64_v1>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_64_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize
                - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_fsid() {
    const UNINIT: ::std::mem::MaybeUninit<fsid> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsid>(),
        8usize,
        concat!("Size of: ", stringify!(fsid))
    );
    assert_eq!(
        ::std::mem::align_of::<fsid>(),
        4usize,
        concat!("Alignment of ", stringify!(fsid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsid), "::", stringify!(val))
    );
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[test]
fn bindgen_test_layout_fsobj_id() {
    const UNINIT: ::std::mem::MaybeUninit<fsobj_id> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsobj_id>(),
        8usize,
        concat!("Size of: ", stringify!(fsobj_id))
    );
    assert_eq!(
        ::std::mem::align_of::<fsobj_id>(),
        4usize,
        concat!("Alignment of ", stringify!(fsobj_id))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fid_objno) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_objno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fid_generation) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_generation)
        )
    );
}
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[test]
fn bindgen_test_layout_dyld_kernel_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_image_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_image_info>(),
        40usize,
        concat!("Size of: ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsobjid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsobjid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).load_addr) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(load_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_dyld_kernel_process_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_process_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_process_info>(),
        72usize,
        concat!("Size of: ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_process_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cache_image_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(cache_image_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).imageCount) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(imageCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initialImageCount) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(initialImageCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dyldState) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(dyldState)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).no_cache) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).private_cache) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(private_cache)
        )
    );
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 8192usize];
pub type nspace_name_t = [::std::os::raw::c_char; 8192usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct io_connect_t(pub io_object_t);
impl ::std::ops::Deref for io_connect_t {
    type Target = io_object_t;
    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl ::std::ops::DerefMut for io_connect_t {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
pub type io_enumerator_t = io_object_t;
pub type io_ident_t = io_object_t;
pub type io_iterator_t = io_object_t;
pub type io_registry_entry_t = io_object_t;
pub type io_service_t = io_object_t;
pub type uext_object_t = io_object_t;
pub const kIODefaultMemoryType: _bindgen_ty_7 = 0;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const kIODefaultCache: _bindgen_ty_8 = 0;
pub const kIOInhibitCache: _bindgen_ty_8 = 1;
pub const kIOWriteThruCache: _bindgen_ty_8 = 2;
pub const kIOCopybackCache: _bindgen_ty_8 = 3;
pub const kIOWriteCombineCache: _bindgen_ty_8 = 4;
pub const kIOCopybackInnerCache: _bindgen_ty_8 = 5;
pub const kIOPostedWrite: _bindgen_ty_8 = 6;
pub const kIORealTimeCache: _bindgen_ty_8 = 7;
pub const kIOPostedReordered: _bindgen_ty_8 = 8;
pub const kIOPostedCombinedReordered: _bindgen_ty_8 = 9;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const kIOMapAnywhere: _bindgen_ty_9 = 1;
pub const kIOMapCacheMask: _bindgen_ty_9 = 3840;
pub const kIOMapCacheShift: _bindgen_ty_9 = 8;
pub const kIOMapDefaultCache: _bindgen_ty_9 = 0;
pub const kIOMapInhibitCache: _bindgen_ty_9 = 256;
pub const kIOMapWriteThruCache: _bindgen_ty_9 = 512;
pub const kIOMapCopybackCache: _bindgen_ty_9 = 768;
pub const kIOMapWriteCombineCache: _bindgen_ty_9 = 1024;
pub const kIOMapCopybackInnerCache: _bindgen_ty_9 = 1280;
pub const kIOMapPostedWrite: _bindgen_ty_9 = 1536;
pub const kIOMapRealTimeCache: _bindgen_ty_9 = 1792;
pub const kIOMapPostedReordered: _bindgen_ty_9 = 2048;
pub const kIOMapPostedCombinedReordered: _bindgen_ty_9 = 2304;
pub const kIOMapUserOptionsMask: _bindgen_ty_9 = 4095;
pub const kIOMapReadOnly: _bindgen_ty_9 = 4096;
pub const kIOMapStatic: _bindgen_ty_9 = 16777216;
pub const kIOMapReference: _bindgen_ty_9 = 33554432;
pub const kIOMapUnique: _bindgen_ty_9 = 67108864;
pub const kIOMapPrefault: _bindgen_ty_9 = 268435456;
pub const kIOMapOverwrite: _bindgen_ty_9 = 536870912;
pub const kIOMapGuardedMask: _bindgen_ty_9 = 3221225472;
pub const kIOMapGuardedSmall: _bindgen_ty_9 = 1073741824;
pub const kIOMapGuardedLarge: _bindgen_ty_9 = 2147483648;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const kNanosecondScale: _bindgen_ty_10 = 1;
pub const kMicrosecondScale: _bindgen_ty_10 = 1000;
pub const kMillisecondScale: _bindgen_ty_10 = 1000000;
pub const kSecondScale: _bindgen_ty_10 = 1000000000;
pub const kTickScale: _bindgen_ty_10 = 10000000;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const kIOConnectMethodVarOutputSize: _bindgen_ty_11 = -3;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub type IODeviceNumber = ::std::os::raw::c_uint;
pub const kIOMaxBusStall40usec: _bindgen_ty_12 = 40000;
pub const kIOMaxBusStall30usec: _bindgen_ty_12 = 30000;
pub const kIOMaxBusStall25usec: _bindgen_ty_12 = 25000;
pub const kIOMaxBusStall20usec: _bindgen_ty_12 = 20000;
pub const kIOMaxBusStall10usec: _bindgen_ty_12 = 10000;
pub const kIOMaxBusStall5usec: _bindgen_ty_12 = 5000;
pub const kIOMaxBusStallNone: _bindgen_ty_12 = 0;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type IOMessage = UInt32;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(
        filename: u64,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(
        pid: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(
        t: mach_port_name_t,
        x: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ) -> ::std::os::raw::c_int,
    >;
}
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
extern "C" {
    pub fn _Block_copy(
        aBlock: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock:
        [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock:
        [*mut ::std::os::raw::c_void; 32usize];
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSArray), alloc) })
    }
}
impl INSArray for NSArray {}
pub trait INSArray: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedString), alloc) })
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSString), alloc) })
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNull(pub id);
impl std::ops::Deref for NSNull {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNull {}
impl NSNull {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNull), alloc) })
    }
}
impl INSNull for NSNull {}
pub trait INSNull: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCharacterSet(pub id);
impl std::ops::Deref for NSCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCharacterSet {}
impl NSCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCharacterSet), alloc) })
    }
}
impl INSCharacterSet for NSCharacterSet {}
pub trait INSCharacterSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSData), alloc) })
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDate), alloc) })
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimeZone), alloc) })
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDictionary), alloc) })
    }
}
impl INSDictionary for NSDictionary {}
pub trait INSDictionary: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSError), alloc) })
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLocale), alloc) })
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumber), alloc) })
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSet), alloc) })
    }
}
impl INSSet for NSSet {}
pub trait INSSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURL), alloc) })
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult_kCFCompareLessThan: CFComparisonResult = -1;
pub const CFComparisonResult_kCFCompareEqualTo: CFComparisonResult = 0;
pub const CFComparisonResult_kCFCompareGreaterThan: CFComparisonResult = 1;
pub type CFComparisonResult = CFIndex;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
#[test]
fn bindgen_test_layout_CFRange() {
    const UNINIT: ::std::mem::MaybeUninit<CFRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRange>(),
        16usize,
        concat!("Size of: ", stringify!(CFRange))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRange>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRange))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(length)
        )
    );
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        info: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void),
>;
pub type CFAllocatorCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
#[test]
fn bindgen_test_layout_CFAllocatorContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFAllocatorContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFAllocatorContext>(),
        72usize,
        concat!("Size of: ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFAllocatorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allocate) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(allocate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reallocate) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(reallocate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).deallocate) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(deallocate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).preferredSize) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(preferredSize)
        )
    );
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    );
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub const ptrauth_key_ptrauth_key_none: ptrauth_key = -1;
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_int;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryKeyCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFDictionaryKeyCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryKeyCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryKeyCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(hash)
        )
    );
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryValueCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFDictionaryValueCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryValueCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryValueCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(equal)
        )
    );
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFArrayCallBacks() {
    const UNINIT: ::std::mem::MaybeUninit<CFArrayCallBacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFArrayCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFArrayCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(equal)
        )
    );
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(
        allocator: CFAllocatorRef,
        theArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(
        theArray: CFMutableArrayRef,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(
        allocator: CFAllocatorRef,
        at: CFAbsoluteTime,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianDate() {
    const UNINIT: ::std::mem::MaybeUninit<CFGregorianDate> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFGregorianDate>(),
        16usize,
        concat!("Size of: ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianDate>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(second)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianUnits() {
    const UNINIT: ::std::mem::MaybeUninit<CFGregorianUnits> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFGregorianUnits>(),
        32usize,
        concat!("Size of: ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianUnits>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).years) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(years)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).months) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(months)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).days) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(days)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hours) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minutes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(seconds)
        )
    );
}
pub const CFGregorianUnitFlags_kCFGregorianUnitsYears: CFGregorianUnitFlags = 1;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMonths: CFGregorianUnitFlags =
    2;
pub const CFGregorianUnitFlags_kCFGregorianUnitsDays: CFGregorianUnitFlags = 4;
pub const CFGregorianUnitFlags_kCFGregorianUnitsHours: CFGregorianUnitFlags = 8;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMinutes: CFGregorianUnitFlags =
    16;
pub const CFGregorianUnitFlags_kCFGregorianUnitsSeconds: CFGregorianUnitFlags =
    32;
pub const CFGregorianUnitFlags_kCFGregorianAllUnits: CFGregorianUnitFlags =
    16777215;
pub type CFGregorianUnitFlags = CFOptionFlags;
extern "C" {
    pub fn CFGregorianDateIsValid(
        gdate: CFGregorianDate,
        unitFlags: CFOptionFlags,
    ) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
    ) -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
    ) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(
        allocator: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(
        theData: CFDataRef,
        range: CFRange,
        buffer: *mut UInt8,
    );
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(
        theData: CFMutableDataRef,
        extraLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataAppendBytes(
        theData: CFMutableDataRef,
        bytes: *const UInt8,
        length: CFIndex,
    );
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub const CFDataSearchFlags_kCFDataSearchBackwards: CFDataSearchFlags = 1;
pub const CFDataSearchFlags_kCFDataSearchAnchored: CFDataSearchFlags = 2;
pub type CFDataSearchFlags = CFOptionFlags;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetControl:
    CFCharacterSetPredefinedSet = 1;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespace:
    CFCharacterSetPredefinedSet = 2;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespaceAndNewline:
    CFCharacterSetPredefinedSet = 3;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecimalDigit:
    CFCharacterSetPredefinedSet = 4;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLetter:
    CFCharacterSetPredefinedSet = 5;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLowercaseLetter:
    CFCharacterSetPredefinedSet = 6;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetUppercaseLetter:
    CFCharacterSetPredefinedSet = 7;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNonBase:
    CFCharacterSetPredefinedSet = 8;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecomposable:
    CFCharacterSetPredefinedSet = 9;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetAlphaNumeric:
    CFCharacterSetPredefinedSet = 10;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetPunctuation:
    CFCharacterSetPredefinedSet = 11;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetCapitalizedLetter:
    CFCharacterSetPredefinedSet = 13;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetSymbol:
    CFCharacterSetPredefinedSet = 14;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNewline:
    CFCharacterSetPredefinedSet = 15;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetIllegal:
    CFCharacterSetPredefinedSet = 12;
pub type CFCharacterSetPredefinedSet = CFIndex;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(
        theSet: CFCharacterSetRef,
        thePlane: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(
        alloc: CFAllocatorRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UniChar,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDrop : CFNotificationSuspensionBehavior = 1 ;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorCoalesce : CFNotificationSuspensionBehavior = 2 ;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorHold : CFNotificationSuspensionBehavior = 3 ;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDeliverImmediately : CFNotificationSuspensionBehavior = 4 ;
pub type CFNotificationSuspensionBehavior = CFIndex;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_13 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = CFOptionFlags;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionUnknown:
    CFLocaleLanguageDirection = 0;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionLeftToRight:
    CFLocaleLanguageDirection = 1;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionRightToLeft:
    CFLocaleLanguageDirection = 2;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionTopToBottom:
    CFLocaleLanguageDirection = 3;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionBottomToTop:
    CFLocaleLanguageDirection = 4;
pub type CFLocaleLanguageDirection = CFIndex;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings_kCFStringEncodingMacRoman:
    CFStringBuiltInEncodings = 0;
pub const CFStringBuiltInEncodings_kCFStringEncodingWindowsLatin1:
    CFStringBuiltInEncodings = 1280;
pub const CFStringBuiltInEncodings_kCFStringEncodingISOLatin1:
    CFStringBuiltInEncodings = 513;
pub const CFStringBuiltInEncodings_kCFStringEncodingNextStepLatin:
    CFStringBuiltInEncodings = 2817;
pub const CFStringBuiltInEncodings_kCFStringEncodingASCII:
    CFStringBuiltInEncodings = 1536;
pub const CFStringBuiltInEncodings_kCFStringEncodingUnicode:
    CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF8:
    CFStringBuiltInEncodings = 134217984;
pub const CFStringBuiltInEncodings_kCFStringEncodingNonLossyASCII:
    CFStringBuiltInEncodings = 3071;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16:
    CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16BE:
    CFStringBuiltInEncodings = 268435712;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16LE:
    CFStringBuiltInEncodings = 335544576;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32:
    CFStringBuiltInEncodings = 201326848;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32BE:
    CFStringBuiltInEncodings = 402653440;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32LE:
    CFStringBuiltInEncodings = 469762304;
pub type CFStringBuiltInEncodings = CFStringEncoding;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: va_list,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(
        theString: CFStringRef,
        idx: CFIndex,
    ) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(
        theString: CFStringRef,
        range: CFRange,
        buffer: *mut UniChar,
    );
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(
        theString: CFStringRef,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(
        theString: CFStringRef,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(
        string: CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub const CFStringCompareFlags_kCFCompareCaseInsensitive: CFStringCompareFlags =
    1;
pub const CFStringCompareFlags_kCFCompareBackwards: CFStringCompareFlags = 4;
pub const CFStringCompareFlags_kCFCompareAnchored: CFStringCompareFlags = 8;
pub const CFStringCompareFlags_kCFCompareNonliteral: CFStringCompareFlags = 16;
pub const CFStringCompareFlags_kCFCompareLocalized: CFStringCompareFlags = 32;
pub const CFStringCompareFlags_kCFCompareNumerically: CFStringCompareFlags = 64;
pub const CFStringCompareFlags_kCFCompareDiacriticInsensitive:
    CFStringCompareFlags = 128;
pub const CFStringCompareFlags_kCFCompareWidthInsensitive:
    CFStringCompareFlags = 256;
pub const CFStringCompareFlags_kCFCompareForcedOrdering: CFStringCompareFlags =
    512;
pub type CFStringCompareFlags = CFOptionFlags;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(
        theString: CFStringRef,
        prefix: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(
        theString: CFStringRef,
        suffix: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(
        locale: CFLocaleRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(
        theString: CFMutableStringRef,
        appendedString: CFStringRef,
    );
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    );
}
extern "C" {
    pub fn CFStringInsert(
        str_: CFMutableStringRef,
        idx: CFIndex,
        insertedStr: CFStringRef,
    );
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(
        theString: CFMutableStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFStringReplaceAll(
        theString: CFMutableStringRef,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(
        theString: CFMutableStringRef,
        locale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringUppercase(
        theString: CFMutableStringRef,
        locale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringCapitalize(
        theString: CFMutableStringRef,
        locale: CFLocaleRef,
    );
}
pub const CFStringNormalizationForm_kCFStringNormalizationFormD:
    CFStringNormalizationForm = 0;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKD:
    CFStringNormalizationForm = 1;
pub const CFStringNormalizationForm_kCFStringNormalizationFormC:
    CFStringNormalizationForm = 2;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKC:
    CFStringNormalizationForm = 3;
pub type CFStringNormalizationForm = CFIndex;
extern "C" {
    pub fn CFStringNormalize(
        theString: CFMutableStringRef,
        theForm: CFStringNormalizationForm,
    );
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding)
        -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(
        encoding: CFStringEncoding,
    ) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(
        codepage: UInt32,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(
        theString: CFStringRef,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
#[test]
fn bindgen_test_layout_CFStringInlineBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<CFStringInlineBuffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFStringInlineBuffer>(),
        184usize,
        concat!("Size of: ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStringInlineBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).theString) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(theString)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).directUniCharBuffer) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directUniCharBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).directCStringBuffer) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directCStringBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rangeToBuffer) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(rangeToBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferedRangeStart) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeStart)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferedRangeEnd) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeEnd)
        )
    );
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(
        cStr: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub const CFRunLoopRunResult_kCFRunLoopRunFinished: CFRunLoopRunResult = 1;
pub const CFRunLoopRunResult_kCFRunLoopRunStopped: CFRunLoopRunResult = 2;
pub const CFRunLoopRunResult_kCFRunLoopRunTimedOut: CFRunLoopRunResult = 3;
pub const CFRunLoopRunResult_kCFRunLoopRunHandledSource: CFRunLoopRunResult = 4;
pub type CFRunLoopRunResult = SInt32;
pub const CFRunLoopActivity_kCFRunLoopEntry: CFRunLoopActivity = 1;
pub const CFRunLoopActivity_kCFRunLoopBeforeTimers: CFRunLoopActivity = 2;
pub const CFRunLoopActivity_kCFRunLoopBeforeSources: CFRunLoopActivity = 4;
pub const CFRunLoopActivity_kCFRunLoopBeforeWaiting: CFRunLoopActivity = 32;
pub const CFRunLoopActivity_kCFRunLoopAfterWaiting: CFRunLoopActivity = 64;
pub const CFRunLoopActivity_kCFRunLoopExit: CFRunLoopActivity = 128;
pub const CFRunLoopActivity_kCFRunLoopAllActivities: CFRunLoopActivity =
    268435455;
pub type CFRunLoopActivity = CFOptionFlags;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(
        rl: CFRunLoopRef,
        mode: CFRunLoopMode,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopSourceContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext>(),
        80usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).schedule) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(schedule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(perform)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext1() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopSourceContext1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext1>(),
        72usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext1>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(getPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perform) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(perform)
        )
    );
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopObserverContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopObserverContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopObserverContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopObserverContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(
        observer: CFRunLoopObserverRef,
    ) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(
        observer: CFRunLoopObserverRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef)
        -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
        ) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopTimerContext() {
    const UNINIT: ::std::mem::MaybeUninit<CFRunLoopTimerContext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopTimerContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopTimerContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).copyDescription) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        timer: CFRunLoopTimerRef,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(
        timer: CFRunLoopTimerRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(
        timer: CFRunLoopTimerRef,
        fireDate: CFAbsoluteTime,
    );
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(
        timer: CFRunLoopTimerRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(
        timer: CFRunLoopTimerRef,
        context: *mut CFRunLoopTimerContext,
    );
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(
        timer: CFRunLoopTimerRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(
        timer: CFRunLoopTimerRef,
        tolerance: CFTimeInterval,
    );
}
pub const kFirstIOKitNotificationType: _bindgen_ty_14 = 100;
pub const kIOServicePublishNotificationType: _bindgen_ty_14 = 100;
pub const kIOServiceMatchedNotificationType: _bindgen_ty_14 = 101;
pub const kIOServiceTerminatedNotificationType: _bindgen_ty_14 = 102;
pub const kIOAsyncCompletionNotificationType: _bindgen_ty_14 = 150;
pub const kIOServiceMessageNotificationType: _bindgen_ty_14 = 160;
pub const kLastIOKitNotificationType: _bindgen_ty_14 = 199;
pub const kIOKitNoticationTypeMask: _bindgen_ty_14 = 4095;
pub const kIOKitNoticationTypeSizeAdjShift: _bindgen_ty_14 = 30;
pub const kIOKitNoticationMsgSizeMask: _bindgen_ty_14 = 3;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const kOSNotificationMessageID: _bindgen_ty_15 = 53;
pub const kOSAsyncCompleteMessageID: _bindgen_ty_15 = 57;
pub const kMaxAsyncArgs: _bindgen_ty_15 = 16;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const kIOAsyncReservedIndex: _bindgen_ty_16 = 0;
pub const kIOAsyncReservedCount: _bindgen_ty_16 = 1;
pub const kIOAsyncCalloutFuncIndex: _bindgen_ty_16 = 1;
pub const kIOAsyncCalloutRefconIndex: _bindgen_ty_16 = 2;
pub const kIOAsyncCalloutCount: _bindgen_ty_16 = 3;
pub const kIOMatchingCalloutFuncIndex: _bindgen_ty_16 = 1;
pub const kIOMatchingCalloutRefconIndex: _bindgen_ty_16 = 2;
pub const kIOMatchingCalloutCount: _bindgen_ty_16 = 3;
pub const kIOInterestCalloutFuncIndex: _bindgen_ty_16 = 1;
pub const kIOInterestCalloutRefconIndex: _bindgen_ty_16 = 2;
pub const kIOInterestCalloutServiceIndex: _bindgen_ty_16 = 3;
pub const kIOInterestCalloutCount: _bindgen_ty_16 = 4;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const kOSAsyncRef64Count: _bindgen_ty_17 = 8;
pub const kOSAsyncRef64Size: _bindgen_ty_17 = 64;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub type OSAsyncReference64 = [io_user_reference_t; 8usize];
#[repr(C)]
#[derive(Debug)]
pub struct OSNotificationHeader64 {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference64,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_OSNotificationHeader64() {
    const UNINIT: ::std::mem::MaybeUninit<OSNotificationHeader64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSNotificationHeader64>(),
        72usize,
        concat!("Size of: ", stringify!(OSNotificationHeader64))
    );
    assert_eq!(
        ::std::mem::align_of::<OSNotificationHeader64>(),
        8usize,
        concat!("Alignment of ", stringify!(OSNotificationHeader64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader64),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader64),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader64),
            "::",
            stringify!(content)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOServiceInterestContent64 {
    pub messageType: natural_t,
    pub messageArgument: [io_user_reference_t; 1usize],
}
#[test]
fn bindgen_test_layout_IOServiceInterestContent64() {
    const UNINIT: ::std::mem::MaybeUninit<IOServiceInterestContent64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOServiceInterestContent64>(),
        12usize,
        concat!("Size of: ", stringify!(IOServiceInterestContent64))
    );
    assert_eq!(
        ::std::mem::align_of::<IOServiceInterestContent64>(),
        4usize,
        concat!("Alignment of ", stringify!(IOServiceInterestContent64))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent64),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messageArgument) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent64),
            "::",
            stringify!(messageArgument)
        )
    );
}
pub const kOSAsyncRefCount: _bindgen_ty_18 = 8;
pub const kOSAsyncRefSize: _bindgen_ty_18 = 32;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub type OSAsyncReference = [natural_t; 8usize];
#[repr(C)]
#[derive(Debug)]
pub struct OSNotificationHeader {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_OSNotificationHeader() {
    const UNINIT: ::std::mem::MaybeUninit<OSNotificationHeader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSNotificationHeader>(),
        40usize,
        concat!("Size of: ", stringify!(OSNotificationHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<OSNotificationHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(OSNotificationHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OSNotificationHeader),
            "::",
            stringify!(content)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOServiceInterestContent {
    pub messageType: natural_t,
    pub messageArgument: [*mut ::std::os::raw::c_void; 1usize],
}
#[test]
fn bindgen_test_layout_IOServiceInterestContent() {
    const UNINIT: ::std::mem::MaybeUninit<IOServiceInterestContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOServiceInterestContent>(),
        12usize,
        concat!("Size of: ", stringify!(IOServiceInterestContent))
    );
    assert_eq!(
        ::std::mem::align_of::<IOServiceInterestContent>(),
        4usize,
        concat!("Alignment of ", stringify!(IOServiceInterestContent))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).messageArgument) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOServiceInterestContent),
            "::",
            stringify!(messageArgument)
        )
    );
}
#[repr(C, packed(4))]
pub struct IOAsyncCompletionContent {
    pub result: IOReturn,
    pub args: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
}
#[test]
fn bindgen_test_layout_IOAsyncCompletionContent() {
    const UNINIT: ::std::mem::MaybeUninit<IOAsyncCompletionContent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IOAsyncCompletionContent>(),
        4usize,
        concat!("Size of: ", stringify!(IOAsyncCompletionContent))
    );
    assert_eq!(
        ::std::mem::align_of::<IOAsyncCompletionContent>(),
        4usize,
        concat!("Alignment of ", stringify!(IOAsyncCompletionContent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IOAsyncCompletionContent),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IOAsyncCompletionContent),
            "::",
            stringify!(args)
        )
    );
}
pub type os_function_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(
        __errnum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(
        __s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(
        __s1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(
        __sig: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(
        __mode: ::std::os::raw::c_int,
        __bp: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<accessx_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ad_name_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ad_flags) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(
        arg1: ::std::os::raw::c_int,
        arg2: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        arg1: ::std::os::raw::c_int,
        arg2: off_t,
        arg3: ::std::os::raw::c_int,
    ) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(
        arg1: ::std::os::raw::c_int,
        arg2: pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn brk(
        arg1: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(
        arg1: *const ::std::os::raw::c_char,
        arg2: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(
        arg1: ::std::os::raw::c_int,
        arg2: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        arg1: ::std::os::raw::c_int,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(
        arg1: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t)
        -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(
        arg1: uid_t,
        arg2: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(
        arg1: *mut uid_t,
        arg2: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(
        arg1: ::std::os::raw::c_int,
        arg2: *const gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setlogin(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        24usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[test]
fn bindgen_test_layout_flocktimeout() {
    const UNINIT: ::std::mem::MaybeUninit<flocktimeout> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flocktimeout>(),
        40usize,
        concat!("Size of: ", stringify!(flocktimeout))
    );
    assert_eq!(
        ::std::mem::align_of::<flocktimeout>(),
        8usize,
        concat!("Alignment of ", stringify!(flocktimeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_radvisory() {
    const UNINIT: ::std::mem::MaybeUninit<radvisory> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radvisory>(),
        16usize,
        concat!("Size of: ", stringify!(radvisory))
    );
    assert_eq!(
        ::std::mem::align_of::<radvisory>(),
        8usize,
        concat!("Alignment of ", stringify!(radvisory))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ra_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ra_count) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsignatures() {
    const UNINIT: ::std::mem::MaybeUninit<fsignatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsignatures>(),
        56usize,
        concat!("Size of: ", stringify!(fsignatures))
    );
    assert_eq!(
        ::std::mem::align_of::<fsignatures>(),
        8usize,
        concat!("Alignment of ", stringify!(fsignatures))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_fsignatures_size) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_fsignatures_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_cdhash) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_cdhash)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_hash_type) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_hash_type)
        )
    );
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsupplement() {
    const UNINIT: ::std::mem::MaybeUninit<fsupplement> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsupplement>(),
        32usize,
        concat!("Size of: ", stringify!(fsupplement))
    );
    assert_eq!(
        ::std::mem::align_of::<fsupplement>(),
        8usize,
        concat!("Alignment of ", stringify!(fsupplement))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fs_orig_fd) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_orig_fd)
        )
    );
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fchecklv() {
    const UNINIT: ::std::mem::MaybeUninit<fchecklv> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fchecklv>(),
        24usize,
        concat!("Size of: ", stringify!(fchecklv))
    );
    assert_eq!(
        ::std::mem::align_of::<fchecklv>(),
        8usize,
        concat!("Alignment of ", stringify!(fchecklv))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lv_file_start) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_file_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lv_error_message_size) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lv_error_message) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message)
        )
    );
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fgetsigsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<fgetsigsinfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fgetsigsinfo>(),
        16usize,
        concat!("Size of: ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<fgetsigsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fg_file_start) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_file_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fg_info_request) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_info_request)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fg_sig_is_platform) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_sig_is_platform)
        )
    );
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[test]
fn bindgen_test_layout_fstore() {
    const UNINIT: ::std::mem::MaybeUninit<fstore> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fstore>(),
        32usize,
        concat!("Size of: ", stringify!(fstore))
    );
    assert_eq!(
        ::std::mem::align_of::<fstore>(),
        8usize,
        concat!("Alignment of ", stringify!(fstore))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fst_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fst_posmode) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_posmode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fst_offset) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fst_length) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_length)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fst_bytesalloc) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_bytesalloc)
        )
    );
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[test]
fn bindgen_test_layout_fpunchhole() {
    const UNINIT: ::std::mem::MaybeUninit<fpunchhole> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fpunchhole>(),
        24usize,
        concat!("Size of: ", stringify!(fpunchhole))
    );
    assert_eq!(
        ::std::mem::align_of::<fpunchhole>(),
        8usize,
        concat!("Alignment of ", stringify!(fpunchhole))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fp_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fp_length) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_length)
        )
    );
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[test]
fn bindgen_test_layout_ftrimactivefile() {
    const UNINIT: ::std::mem::MaybeUninit<ftrimactivefile> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ftrimactivefile>(),
        16usize,
        concat!("Size of: ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        ::std::mem::align_of::<ftrimactivefile>(),
        8usize,
        concat!("Alignment of ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fta_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fta_length) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_length)
        )
    );
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[test]
fn bindgen_test_layout_fspecread() {
    const UNINIT: ::std::mem::MaybeUninit<fspecread> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fspecread>(),
        24usize,
        concat!("Size of: ", stringify!(fspecread))
    );
    assert_eq!(
        ::std::mem::align_of::<fspecread>(),
        8usize,
        concat!("Alignment of ", stringify!(fspecread))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fsr_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fsr_offset) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fsr_length) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_length)
        )
    );
}
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fattributiontag {
    pub ft_flags: ::std::os::raw::c_uint,
    pub ft_hash: ::std::os::raw::c_ulonglong,
    pub ft_attribution_name: [::std::os::raw::c_char; 255usize],
}
#[test]
fn bindgen_test_layout_fattributiontag() {
    const UNINIT: ::std::mem::MaybeUninit<fattributiontag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fattributiontag>(),
        272usize,
        concat!("Size of: ", stringify!(fattributiontag))
    );
    assert_eq!(
        ::std::mem::align_of::<fattributiontag>(),
        8usize,
        concat!("Alignment of ", stringify!(fattributiontag))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ft_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ft_hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_hash)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ft_attribution_name) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_attribution_name)
        )
    );
}
pub type fattributiontag_t = fattributiontag;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[test]
fn bindgen_test_layout_log2phys() {
    const UNINIT: ::std::mem::MaybeUninit<log2phys> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<log2phys>(),
        20usize,
        concat!("Size of: ", stringify!(log2phys))
    );
    assert_eq!(
        ::std::mem::align_of::<log2phys>(),
        4usize,
        concat!("Alignment of ", stringify!(log2phys))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).l2p_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).l2p_contigbytes) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_contigbytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).l2p_devoffset) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_devoffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        340usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        816usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ns) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ns)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_sigaltstack> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ucontext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function:
        ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<__siginfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
    >,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction_u> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
    >,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    const UNINIT: ::std::mem::MaybeUninit<sigvec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
            >,
        ),
    >;
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::std::mem::MaybeUninit<rusage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v0> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive)
                as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive)
                as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize
                - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize
                - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive)
                as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize
                - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize
                - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v6() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v6>(),
        464usize,
        concat!("Size of: ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v6>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive)
                as usize
                - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize
                - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize
                - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_user_ptime) as usize - ptr as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_ptime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_system_ptime) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_ptime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pinstructions) as usize
                - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pinstructions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_pcycles) as usize - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pcycles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_energy_nj) as usize - ptr as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_energy_nj)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_penergy_nj) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_penergy_nj)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_reserved) as usize - ptr as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_reserved)
        )
    );
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::std::mem::MaybeUninit<rlimit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    const UNINIT: ::std::mem::MaybeUninit<proc_rlimit_control_wakeupmon> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(
        arg1: ::std::os::raw::c_int,
        arg2: *mut rlimit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(
        arg1: ::std::os::raw::c_int,
        arg2: *mut rusage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(
        arg1: ::std::os::raw::c_int,
        arg2: *const rlimit,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32)
        }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::std::mem::MaybeUninit<wait> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong)
        -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
extern "C" {
    pub fn llabs(
        arg1: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn mblen(
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(
        arg1: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(
        arg1: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(
        arg1: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(
        arg1: *mut f64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
#[test]
fn bindgen_test_layout_objc_object() {
    const UNINIT: ::std::mem::MaybeUninit<objc_object> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<objc_object>(),
        8usize,
        concat!("Size of: ", stringify!(objc_object))
    );
    assert_eq!(
        ::std::mem::align_of::<objc_object>(),
        8usize,
        concat!("Alignment of ", stringify!(objc_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(objc_object),
            "::",
            stringify!(isa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = bool;
pub type objc_zone_t = *mut _malloc_zone_t;
extern "C" {
    pub fn sel_getName(
        sel: objc::runtime::Sel,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_registerName(
        str_: *const ::std::os::raw::c_char,
    ) -> objc::runtime::Sel;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sel_isMapped(sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn sel_getUid(
        str_: *const ::std::os::raw::c_char,
    ) -> objc::runtime::Sel;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMethodSignature), alloc) })
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocation), alloc) })
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {}
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isEqual : object)
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, class)
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, self_)
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector)
    }
    unsafe fn performSelector_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object)
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isKindOfClass : aClass)
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isMemberOfClass : aClass)
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , respondsToSelector : aSelector)
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retain)
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, release)
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autorelease)
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainCount)
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zone)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclass)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copy)
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopy)
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , methodForSelector : aSelector)
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , doesNotRecognizeSelector : aSelector)
    }
    unsafe fn forwardingTargetForSelector_(
        &self,
        aSelector: objc::runtime::Sel,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , forwardingTargetForSelector : aSelector)
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , forwardInvocation : anInvocation)
    }
    unsafe fn methodSignatureForSelector_(
        &self,
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , methodSignatureForSelector : aSelector)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), load)
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), initialize)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), new)
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , allocWithZone : zone)
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), alloc)
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , copyWithZone : zone)
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , mutableCopyWithZone : zone)
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , instancesRespondToSelector : aSelector)
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , instanceMethodForSelector : aSelector)
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , instanceMethodSignatureForSelector : aSelector)
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , isSubclassOfClass : aClass)
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , resolveClassMethod : sel)
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , resolveInstanceMethod : sel)
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), hash)
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), superclass)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), class)
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), description)
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), debugDescription)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_object(pub id);
impl std::ops::Deref for OS_object {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_object {}
impl OS_object {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_object), alloc) })
    }
}
impl INSObject for OS_object {}
impl PNSObject for OS_object {}
impl From<OS_object> for NSObject {
    fn from(child: OS_object) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_object {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_object, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_object))
        };
        if is_kind_of {
            Ok(OS_object(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_object")
        }
    }
}
impl IOS_object for OS_object {}
pub trait IOS_object: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
extern "C" {
    pub fn os_retain(
        object: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_attr_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_attr_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_attr_opaque_s>(),
        64usize,
        concat!("Size of: ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_attr_opaque_s>(),
        4usize,
        concat!("Alignment of ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_attr_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_attr_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_interval_data_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_interval_data_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_interval_data_opaque_s>(),
        60usize,
        concat!("Size of: ", stringify!(os_workgroup_interval_data_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_interval_data_opaque_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(os_workgroup_interval_data_opaque_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_join_token_opaque_s() {
    const UNINIT: ::std::mem::MaybeUninit<os_workgroup_join_token_opaque_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_join_token_opaque_s>(),
        40usize,
        concat!("Size of: ", stringify!(os_workgroup_join_token_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_join_token_opaque_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(os_workgroup_join_token_opaque_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup(pub id);
impl std::ops::Deref for OS_os_workgroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup {}
impl OS_os_workgroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup), alloc) })
    }
}
impl IOS_object for OS_os_workgroup {}
impl From<OS_os_workgroup> for OS_object {
    fn from(child: OS_os_workgroup) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup))
        };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl INSObject for OS_os_workgroup {}
impl PNSObject for OS_os_workgroup {}
impl From<OS_os_workgroup> for NSObject {
    fn from(child: OS_os_workgroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup))
        };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl IOS_os_workgroup for OS_os_workgroup {}
pub trait IOS_os_workgroup: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_t = OS_os_workgroup;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: OS_os_workgroup,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: OS_os_workgroup,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: OS_os_workgroup,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(
        wg: OS_os_workgroup,
        token: os_workgroup_join_token_t,
    );
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: OS_os_workgroup,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: OS_os_workgroup,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: OS_os_workgroup);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: OS_os_workgroup) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t =
    *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: OS_os_workgroup,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_interval: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_interval(pub id);
impl std::ops::Deref for OS_os_workgroup_interval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_interval {}
impl OS_os_workgroup_interval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_interval), alloc) })
    }
}
impl POS_os_workgroup_interval for OS_os_workgroup_interval {}
impl IOS_os_workgroup for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_interval) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(
        parent: OS_os_workgroup,
    ) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err ("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_object for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_object {
    fn from(child: OS_os_workgroup_interval) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(
        parent: OS_object,
    ) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err ("This OS_object cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl INSObject for OS_os_workgroup_interval {}
impl PNSObject for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for NSObject {
    fn from(child: OS_os_workgroup_interval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(
        parent: NSObject,
    ) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_interval))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err ("This NSObject cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_os_workgroup_interval for OS_os_workgroup_interval {}
pub trait IOS_os_workgroup_interval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_interval_t = OS_os_workgroup;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t =
    *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: OS_os_workgroup,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: OS_os_workgroup,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: OS_os_workgroup,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_parallel: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_parallel(pub id);
impl std::ops::Deref for OS_os_workgroup_parallel {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_parallel {}
impl OS_os_workgroup_parallel {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_parallel), alloc) })
    }
}
impl POS_os_workgroup_parallel for OS_os_workgroup_parallel {}
impl IOS_os_workgroup for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_parallel) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(
        parent: OS_os_workgroup,
    ) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err ("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_object for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_object {
    fn from(child: OS_os_workgroup_parallel) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(
        parent: OS_object,
    ) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err ("This OS_object cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl INSObject for OS_os_workgroup_parallel {}
impl PNSObject for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for NSObject {
    fn from(child: OS_os_workgroup_parallel) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(
        parent: NSObject,
    ) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send ! (parent , isKindOfClass : class ! (OS_os_workgroup_parallel))
        };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err ("This NSObject cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_os_workgroup_parallel for OS_os_workgroup_parallel {}
pub trait IOS_os_workgroup_parallel: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_parallel_t = OS_os_workgroup;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_19 = 18446744073709551614;
pub type _bindgen_ty_19 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(
        when: *const timespec,
        delta: i64,
    ) -> dispatch_time_t;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
pub trait POS_dispatch_object: Sized + std::ops::Deref {}
pub type dispatch_object_t = NSObject;
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub use self::qos_class_t as dispatch_qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: NSObject);
}
extern "C" {
    pub fn dispatch_release(object: NSObject);
}
extern "C" {
    pub fn dispatch_get_context(
        object: NSObject,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(
        object: NSObject,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_set_finalizer_f(
        object: NSObject,
        finalizer: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_activate(object: NSObject);
}
extern "C" {
    pub fn dispatch_suspend(object: NSObject);
}
extern "C" {
    pub fn dispatch_resume(object: NSObject);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(
        object: *mut ::std::os::raw::c_void,
        timeout: dispatch_time_t,
    ) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(
        object: NSObject,
        message: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn dispatch_debugv(
        object: NSObject,
        message: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
pub trait POS_dispatch_queue: Sized + std::ops::Deref {}
pub type dispatch_queue_t = NSObject;
pub trait POS_dispatch_queue_global: Sized + std::ops::Deref {}
pub type dispatch_queue_global_t = NSObject;
pub trait POS_dispatch_queue_serial_executor: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_executor_t = NSObject;
pub trait POS_dispatch_queue_serial: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_t = NSObject;
pub trait POS_dispatch_queue_main: Sized + std::ops::Deref {}
pub type dispatch_queue_main_t = NSObject;
pub trait POS_dispatch_queue_concurrent: Sized + std::ops::Deref {}
pub type dispatch_queue_concurrent_t = NSObject;
extern "C" {
    pub fn dispatch_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(
        iterations: usize,
        queue: NSObject,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(
                context: *mut ::std::os::raw::c_void,
                iteration: usize,
            ),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(
        identifier: isize,
        flags: usize,
    ) -> dispatch_queue_global_t;
}
pub trait POS_dispatch_queue_attr: Sized + std::ops::Deref {}
pub type dispatch_queue_attr_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(
        attr: NSObject,
    ) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT : dispatch_autorelease_frequency_t = 0 ;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM : dispatch_autorelease_frequency_t = 1 ;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER : dispatch_autorelease_frequency_t = 2 ;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
        target: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(
        queue: NSObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: NSObject,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: NSObject, queue: NSObject);
}
extern "C" {
    pub fn dispatch_main() -> !;
}
extern "C" {
    pub fn dispatch_after(
        when: dispatch_time_t,
        queue: NSObject,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(
        queue: NSObject,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: NSObject);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: NSObject);
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: NSObject);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER:
    dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED:
    dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT:
    dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS:
    dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS:
    dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS:
    dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_wait(
        block: dispatch_block_t,
        timeout: dispatch_time_t,
    ) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub trait POS_dispatch_source: Sized + std::ops::Deref {}
pub type dispatch_source_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: NSObject,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(
        source: NSObject,
        handler: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(
        source: NSObject,
        handler: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_cancel(source: NSObject);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: NSObject) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: NSObject, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: NSObject,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(
        source: NSObject,
        handler: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
pub trait POS_dispatch_group: Sized + std::ops::Deref {}
pub type dispatch_group_t = NSObject;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(
        group: NSObject,
        queue: NSObject,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(
        group: NSObject,
        timeout: dispatch_time_t,
    ) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(
        group: NSObject,
        queue: NSObject,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: NSObject);
}
extern "C" {
    pub fn dispatch_group_leave(group: NSObject);
}
pub trait POS_dispatch_semaphore: Sized + std::ops::Deref {}
pub type dispatch_semaphore_t = NSObject;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(
        dsema: NSObject,
        timeout: dispatch_time_t,
    ) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: NSObject) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(
        predicate: *mut dispatch_once_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub trait POS_dispatch_data: Sized + std::ops::Deref {}
pub type dispatch_data_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_data_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: NSObject,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: NSObject,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(
        data1: NSObject,
        data2: NSObject,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: NSObject,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(
        data: NSObject,
        applier: dispatch_data_applier_t,
    ) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: NSObject,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: NSObject,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub trait POS_dispatch_io: Sized + std::ops::Deref {}
pub type dispatch_io_t = NSObject;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: NSObject,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: NSObject,
        offset: off_t,
        length: usize,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: NSObject,
        offset: off_t,
        data: NSObject,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(
        channel: NSObject,
        flags: dispatch_io_close_flags_t,
    );
}
extern "C" {
    pub fn dispatch_io_barrier(channel: NSObject, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: NSObject) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: NSObject, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: NSObject, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: NSObject,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub trait POS_dispatch_workloop: Sized + std::ops::Deref {}
pub type dispatch_workloop_t = NSObject;
extern "C" {
    pub fn dispatch_workloop_create(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(
        workloop: NSObject,
        workgroup: OS_os_workgroup,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONotificationPort {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct IONotificationPortRef(pub *mut IONotificationPort);
impl ::std::ops::Deref for IONotificationPortRef {
    type Target = *mut IONotificationPort;
    #[inline]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl ::std::ops::DerefMut for IONotificationPortRef {
    #[inline]
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
pub type IOServiceMatchingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        iterator: io_iterator_t,
    ),
>;
pub type IOServiceInterestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        service: io_service_t,
        messageType: u32,
        messageArgument: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static kIOMainPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMainPort(
        bootstrapPort: mach_port_t,
        mainPort: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static kIOMasterPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMasterPort(
        bootstrapPort: mach_port_t,
        mainPort: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortCreate(
        mainPort: mach_port_t,
    ) -> IONotificationPortRef;
}
extern "C" {
    pub fn IONotificationPortDestroy(notify: IONotificationPortRef);
}
extern "C" {
    pub fn IONotificationPortGetRunLoopSource(
        notify: IONotificationPortRef,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn IONotificationPortGetMachPort(
        notify: IONotificationPortRef,
    ) -> mach_port_t;
}
extern "C" {
    pub fn IONotificationPortSetImportanceReceiver(
        notify: IONotificationPortRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortSetDispatchQueue(
        notify: IONotificationPortRef,
        queue: NSObject,
    );
}
extern "C" {
    pub fn IODispatchCalloutFromMessage(
        unused: *mut ::std::os::raw::c_void,
        msg: *mut mach_msg_header_t,
        reference: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOCreateReceivePort(
        msgType: u32,
        recvPort: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRelease(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRetain(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectGetClass(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectCopyClass(object: io_object_t) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopySuperclassForClass(
        classname: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopyBundleIdentifierForClass(
        classname: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectConformsTo(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOObjectIsEqualTo(
        object: io_object_t,
        anObject: io_object_t,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOObjectGetKernelRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetUserRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOIteratorNext(iterator: io_iterator_t) -> io_object_t;
}
extern "C" {
    pub fn IOIteratorReset(iterator: io_iterator_t);
}
extern "C" {
    pub fn IOIteratorIsValid(iterator: io_iterator_t) -> boolean_t;
}
extern "C" {
    pub fn IOServiceGetMatchingService(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
    ) -> io_service_t;
}
extern "C" {
    pub fn IOServiceGetMatchingServices(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
        existing: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddNotification(
        mainPort: mach_port_t,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        wakePort: mach_port_t,
        reference: usize,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddMatchingNotification(
        notifyPort: IONotificationPortRef,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        callback: IOServiceMatchingCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddInterestNotification(
        notifyPort: IONotificationPortRef,
        service: io_service_t,
        interestType: *mut ::std::os::raw::c_char,
        callback: IOServiceInterestCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_object_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceMatchPropertyTable(
        service: io_service_t,
        matching: CFDictionaryRef,
        matches: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceGetBusyState(
        service: io_service_t,
        busyState: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceWaitQuiet(
        service: io_service_t,
        waitTime: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitGetBusyState(
        mainPort: mach_port_t,
        busyState: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuietWithOptions(
        mainPort: mach_port_t,
        waitTime: *mut mach_timespec_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuiet(
        mainPort: mach_port_t,
        waitTime: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpen(
        service: io_service_t,
        owningTask: task_port_t,
        type_: u32,
        connect: *mut io_connect_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceRequestProbe(
        service: io_service_t,
        options: u32,
    ) -> kern_return_t;
}
pub const kIOServiceInteractionAllowed: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOServiceAuthorize(
        service: io_service_t,
        options: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpenAsFileDescriptor(
        service: io_service_t,
        oflag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IOServiceClose(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddRef(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectRelease(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectGetService(
        connect: io_connect_t,
        service: *mut io_service_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetNotificationPort(
        connect: io_connect_t,
        type_: u32,
        port: mach_port_t,
        reference: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperties(
        connect: io_connect_t,
        properties: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperty(
        connect: io_connect_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallStructMethod(
        connection: mach_port_t,
        selector: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncStructMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallScalarMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncScalarMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap0(connect: io_connect_t, index: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap1(
        connect: io_connect_t,
        index: u32,
        p1: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap2(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap3(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap4(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap5(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap6(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
        p6: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddClient(
        connect: io_connect_t,
        client: io_connect_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryGetRootEntry(mainPort: mach_port_t)
        -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryFromPath(
        mainPort: mach_port_t,
        path: *mut ::std::os::raw::c_char,
    ) -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryCopyFromPath(
        mainPort: mach_port_t,
        path: CFStringRef,
    ) -> io_registry_entry_t;
}
pub const kIORegistryIterateRecursively: _bindgen_ty_21 = 1;
pub const kIORegistryIterateParents: _bindgen_ty_21 = 2;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IORegistryCreateIterator(
        mainPort: mach_port_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorEnterEntry(
        iterator: io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorExitEntry(
        iterator: io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetName(
        entry: io_registry_entry_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetNameInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetLocationInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        location: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCopyPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> CFStringRef;
}
extern "C" {
    pub fn IORegistryEntryGetRegistryEntryID(
        entry: io_registry_entry_t,
        entryID: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperties(
        entry: io_registry_entry_t,
        properties: *mut CFMutableDictionaryRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperty(
        entry: io_registry_entry_t,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntrySearchCFProperty(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntryGetProperty(
        entry: io_registry_entry_t,
        propertyName: *mut ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperties(
        entry: io_registry_entry_t,
        properties: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperty(
        entry: io_registry_entry_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        child: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        parent: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOServiceMatching(
        name: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceNameMatching(
        name: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOBSDNameMatching(
        mainPort: mach_port_t,
        options: u32,
        bsdName: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOOpenFirmwarePathMatching(
        mainPort: mach_port_t,
        options: u32,
        path: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IORegistryEntryIDMatching(entryID: u64) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceOFPathToBSDName(
        mainPort: mach_port_t,
        openFirmwarePath: *mut ::std::os::raw::c_char,
        bsdName: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
pub type IOAsyncCallback0 = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, result: IOReturn),
>;
pub type IOAsyncCallback1 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        args: *mut *mut ::std::os::raw::c_void,
        numArgs: u32,
    ),
>;
extern "C" {
    pub fn OSGetNotificationFromMessage(
        msg: *mut mach_msg_header_t,
        index: u32,
        type_: *mut u32,
        reference: *mut usize,
        content: *mut *mut ::std::os::raw::c_void,
        size: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueSendData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *const ::std::os::raw::c_char,
        size: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueTerminate(
        mainPort: mach_port_t,
        flag: u32,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueGetData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *mut *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueModuleLoaded(
        mainPort: mach_port_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueReset(mainPort: mach_port_t, flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOPMFindPowerManagement(
        master_device_port: mach_port_t,
    ) -> io_connect_t;
}
extern "C" {
    pub fn IOPMSetAggressiveness(
        fb: io_connect_t,
        type_: ::std::os::raw::c_ulong,
        aggressiveness: ::std::os::raw::c_ulong,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMGetAggressiveness(
        fb: io_connect_t,
        type_: ::std::os::raw::c_ulong,
        aggressiveness: *mut ::std::os::raw::c_ulong,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMSleepEnabled() -> boolean_t;
}
extern "C" {
    pub fn IOPMSleepSystem(fb: io_connect_t) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyBatteryInfo(
        masterPort: mach_port_t,
        info: *mut CFArrayRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IORegisterApp(
        refcon: *mut ::std::os::raw::c_void,
        theDriver: io_service_t,
        thePortRef: *mut IONotificationPortRef,
        callback: IOServiceInterestCallback,
        notifier: *mut io_object_t,
    ) -> io_connect_t;
}
extern "C" {
    pub fn IORegisterForSystemPower(
        refcon: *mut ::std::os::raw::c_void,
        thePortRef: *mut IONotificationPortRef,
        callback: IOServiceInterestCallback,
        notifier: *mut io_object_t,
    ) -> io_connect_t;
}
extern "C" {
    pub fn IODeregisterApp(notifier: *mut io_object_t) -> IOReturn;
}
extern "C" {
    pub fn IODeregisterForSystemPower(notifier: *mut io_object_t) -> IOReturn;
}
extern "C" {
    pub fn IOCancelPowerChange(
        kernelPort: io_connect_t,
        notificationID: isize,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMSchedulePowerEvent(
        time_to_wake: CFDateRef,
        my_id: CFStringRef,
        type_: CFStringRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCancelScheduledPowerEvent(
        time_to_wake: CFDateRef,
        my_id: CFStringRef,
        type_: CFStringRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyScheduledPowerEvents() -> CFArrayRef;
}
pub type IOPMAssertionID = u32;
pub const kIOPMNullAssertionID: _bindgen_ty_22 = 0;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub type IOPMAssertionLevel = u32;
pub const kIOPMAssertionLevelOff: _bindgen_ty_23 = 0;
pub const kIOPMAssertionLevelOn: _bindgen_ty_23 = 255;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const IOPMUserActiveType_kIOPMUserActiveLocal: IOPMUserActiveType = 0;
pub const IOPMUserActiveType_kIOPMUserActiveRemote: IOPMUserActiveType = 1;
pub type IOPMUserActiveType = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOPMAssertionCreateWithDescription(
        AssertionType: CFStringRef,
        Name: CFStringRef,
        Details: CFStringRef,
        HumanReadableReason: CFStringRef,
        LocalizationBundlePath: CFStringRef,
        Timeout: CFTimeInterval,
        TimeoutAction: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreateWithProperties(
        AssertionProperties: CFDictionaryRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionDeclareUserActivity(
        AssertionName: CFStringRef,
        userType: IOPMUserActiveType,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMDeclareNetworkClientActivity(
        AssertionName: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionRetain(theAssertion: IOPMAssertionID);
}
extern "C" {
    pub fn IOPMAssertionRelease(AssertionID: IOPMAssertionID) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCopyProperties(
        theAssertion: IOPMAssertionID,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn IOPMAssertionSetProperty(
        theAssertion: IOPMAssertionID,
        theProperty: CFStringRef,
        theValue: CFTypeRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyAssertionsByProcess(
        AssertionsByPID: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyAssertionsStatus(
        AssertionsStatus: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreate(
        AssertionType: CFStringRef,
        AssertionLevel: IOPMAssertionLevel,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreateWithName(
        AssertionType: CFStringRef,
        AssertionLevel: IOPMAssertionLevel,
        AssertionName: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
pub type IOSystemLoadAdvisoryLevel = ::std::os::raw::c_int;
pub const kIOSystemLoadAdvisoryLevelBad: _bindgen_ty_24 = 1;
pub const kIOSystemLoadAdvisoryLevelOK: _bindgen_ty_24 = 2;
pub const kIOSystemLoadAdvisoryLevelGreat: _bindgen_ty_24 = 3;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOGetSystemLoadAdvisory() -> IOSystemLoadAdvisoryLevel;
}
extern "C" {
    pub fn IOCopySystemLoadAdvisoryDetailed() -> CFDictionaryRef;
}
extern "C" {
    pub fn IOPMCopyCPUPowerStatus(
        cpuPowerStatus: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMGetThermalWarningLevel(thermalLevel: *mut u32) -> IOReturn;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
pub type instancetype = id;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct aProtocol(pub id);
impl std::ops::Deref for aProtocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for aProtocol {}
impl aProtocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(aProtocol), alloc) })
    }
}
impl IaProtocol for aProtocol {}
pub trait IaProtocol: Sized + std::ops::Deref {}
